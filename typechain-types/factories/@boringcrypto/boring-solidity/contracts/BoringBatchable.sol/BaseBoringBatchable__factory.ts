/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  BaseBoringBatchable,
  BaseBoringBatchableInterface,
} from "../../../../../@boringcrypto/boring-solidity/contracts/BoringBatchable.sol/BaseBoringBatchable";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "innerError",
        type: "bytes",
      },
    ],
    name: "BatchError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "calls",
        type: "bytes[]",
      },
      {
        internalType: "bool",
        name: "revertOnFail",
        type: "bool",
      },
    ],
    name: "batch",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506103e4806100206000396000f3fe60806040526004361061001e5760003560e01c8063d2423b5114610023575b600080fd5b610036610031366004610153565b610038565b005b60005b828110156100ec5760008030868685818110610059576100596101de565b905060200281019061006b91906101f4565b604051610079929190610242565b600060405180830381855af49150503d80600081146100b4576040519150601f19603f3d011682016040523d82523d6000602084013e6100b9565b606091505b5091509150811580156100c95750835b156100d7576100d7816100f2565b505080806100e490610252565b91505061003b565b50505050565b604481511015610120578060405163d935448560e01b815260040161011791906102d1565b60405180910390fd5b6004810190508080602001905181019061013a9190610301565b60405162461bcd60e51b815260040161011791906102d1565b60008060006040848603121561016857600080fd5b833567ffffffffffffffff8082111561018057600080fd5b818601915086601f83011261019457600080fd5b8135818111156101a357600080fd5b8760208260051b85010111156101b857600080fd5b6020928301955093505084013580151581146101d357600080fd5b809150509250925092565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261020b57600080fd5b83018035915067ffffffffffffffff82111561022657600080fd5b60200191503681900382131561023b57600080fd5b9250929050565b8183823760009101908152919050565b60006001820161027257634e487b7160e01b600052601160045260246000fd5b5060010190565b60005b8381101561029457818101518382015260200161027c565b838111156100ec5750506000910152565b600081518084526102bd816020860160208601610279565b601f01601f19169290920160200192915050565b6020815260006102e460208301846102a5565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561031357600080fd5b815167ffffffffffffffff8082111561032b57600080fd5b818401915084601f83011261033f57600080fd5b815181811115610351576103516102eb565b604051601f8201601f19908116603f01168101908382118183101715610379576103796102eb565b8160405282815287602084870101111561039257600080fd5b6103a3836020830160208801610279565b97965050505050505056fea264697066735822122088091d07cf0f2180fac077ae5c935666c6b1c5c86def5e360b36e04283a5d4cb64736f6c634300080f0033";

type BaseBoringBatchableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BaseBoringBatchableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BaseBoringBatchable__factory extends ContractFactory {
  constructor(...args: BaseBoringBatchableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BaseBoringBatchable> {
    return super.deploy(overrides || {}) as Promise<BaseBoringBatchable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BaseBoringBatchable {
    return super.attach(address) as BaseBoringBatchable;
  }
  override connect(signer: Signer): BaseBoringBatchable__factory {
    return super.connect(signer) as BaseBoringBatchable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BaseBoringBatchableInterface {
    return new utils.Interface(_abi) as BaseBoringBatchableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BaseBoringBatchable {
    return new Contract(address, _abi, signerOrProvider) as BaseBoringBatchable;
  }
}
