/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ConvexBoosterMock,
  ConvexBoosterMockInterface,
} from "../../../contracts/convex/ConvexBoosterMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_lpToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_receiptToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_crvRewards",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "crvRewards",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "deposit",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lpToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "poolInfo",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "lptoken",
            type: "address",
          },
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "address",
            name: "gauge",
            type: "address",
          },
          {
            internalType: "address",
            name: "crvRewards",
            type: "address",
          },
          {
            internalType: "address",
            name: "stash",
            type: "address",
          },
          {
            internalType: "bool",
            name: "shutdown",
            type: "bool",
          },
        ],
        internalType: "struct IConvexBooster.PoolInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "receiptToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516105da3803806105da83398101604081905261002f916100fa565b600080546001600160a01b038581166001600160a01b03199283168117909355600180548683169084161790556002805491851691909216811790915560405163095ea7b360e01b81526004810191909152600019602482015263095ea7b3906044016020604051808303816000875af11580156100b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100d5919061013d565b50505050610166565b80516001600160a01b03811681146100f557600080fd5b919050565b60008060006060848603121561010f57600080fd5b610118846100de565b9250610126602085016100de565b9150610134604085016100de565b90509250925092565b60006020828403121561014f57600080fd5b8151801515811461015f57600080fd5b9392505050565b610465806101756000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631526fe271461005c57806343a0d0661461014a5780635fcbd2851461016d578063b6bff29514610198578063ec78e832146101ab575b600080fd5b6100e461006a36600461036d565b506040805160c08082018352600080835260208084018290528385018290526060808501839052608080860184905260a095860184905286519485018752958401839052948301829052928201819052546001600160a01b0390811682526001548116928201929092526002549091169181019190915290565b604051610141919081516001600160a01b0390811682526020808401518216908301526040808401518216908301526060808401518216908301526080808401519091169082015260a09182015115159181019190915260c00190565b60405180910390f35b61015d610158366004610397565b6101be565b6040519015158152602001610141565b600054610180906001600160a01b031681565b6040516001600160a01b039091168152602001610141565b600254610180906001600160a01b031681565b600154610180906001600160a01b031681565b600080546101d7906001600160a01b0316333086610245565b6002546040516305dc812160e31b8152336004820152602481018590526001600160a01b0390911690632ee4090890604401600060405180830381600087803b15801561022357600080fd5b505af1158015610237573d6000803e3d6000fd5b506001979650505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916102a991906103d0565b6000604051808303816000865af19150503d80600081146102e6576040519150601f19603f3d011682016040523d82523d6000602084013e6102eb565b606091505b5091509150818015610315575080511580610315575080806020019051810190610315919061040b565b6103655760405162461bcd60e51b815260206004820181905260248201527f426f72696e6745524332303a205472616e7366657246726f6d206661696c6564604482015260640160405180910390fd5b505050505050565b60006020828403121561037f57600080fd5b5035919050565b801515811461039457600080fd5b50565b6000806000606084860312156103ac57600080fd5b833592506020840135915060408401356103c581610386565b809150509250925092565b6000825160005b818110156103f157602081860181015185830152016103d7565b81811115610400576000828501525b509190910192915050565b60006020828403121561041d57600080fd5b815161042881610386565b939250505056fea2646970667358221220324a752561171f8038403076a3bfcec37331d8bed4739b10915fc04d33b80c1064736f6c634300080f0033";

type ConvexBoosterMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConvexBoosterMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConvexBoosterMock__factory extends ContractFactory {
  constructor(...args: ConvexBoosterMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _lpToken: PromiseOrValue<string>,
    _receiptToken: PromiseOrValue<string>,
    _crvRewards: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ConvexBoosterMock> {
    return super.deploy(
      _lpToken,
      _receiptToken,
      _crvRewards,
      overrides || {}
    ) as Promise<ConvexBoosterMock>;
  }
  override getDeployTransaction(
    _lpToken: PromiseOrValue<string>,
    _receiptToken: PromiseOrValue<string>,
    _crvRewards: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _lpToken,
      _receiptToken,
      _crvRewards,
      overrides || {}
    );
  }
  override attach(address: string): ConvexBoosterMock {
    return super.attach(address) as ConvexBoosterMock;
  }
  override connect(signer: Signer): ConvexBoosterMock__factory {
    return super.connect(signer) as ConvexBoosterMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConvexBoosterMockInterface {
    return new utils.Interface(_abi) as ConvexBoosterMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConvexBoosterMock {
    return new Contract(address, _abi, signerOrProvider) as ConvexBoosterMock;
  }
}
