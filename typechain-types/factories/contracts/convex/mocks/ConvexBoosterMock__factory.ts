/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ConvexBoosterMock,
  ConvexBoosterMockInterface,
} from "../../../../contracts/convex/mocks/ConvexBoosterMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_lpToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_receiptToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_crvRewards",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "crvRewards",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "deposit",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lpToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "poolInfo",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "lptoken",
            type: "address",
          },
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "address",
            name: "gauge",
            type: "address",
          },
          {
            internalType: "address",
            name: "crvRewards",
            type: "address",
          },
          {
            internalType: "address",
            name: "stash",
            type: "address",
          },
          {
            internalType: "bool",
            name: "shutdown",
            type: "bool",
          },
        ],
        internalType: "struct IConvexBooster.PoolInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "receiptToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461010957606081610669803803809161001f828561010e565b8339810103126101095761003281610147565b90602061004c6040610045838501610147565b9301610147565b604460018060a01b03809516918560018060a01b031991600097889786858a5416178955168360015416176001551680916002541617600255604051948593849263095ea7b360e01b8452600484015260001960248401525af180156100fe576100c0575b60405161050d908161015c8239f35b6020813d82116100f6575b816100d86020938361010e565b810103126100f25751801515036100ef57806100b1565b80fd5b5080fd5b3d91506100cb565b6040513d84823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b0382119082101761013157604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036101095756fe6040608081526004908136101561001557600080fd5b600091823560e01c9081631526fe271461031857816343a0d066146100d4575080635fcbd285146100ad578063b6bff295146100855763ec78e8321461005a57600080fd5b3461008157816003193601126100815760015490516001600160a01b039091168152602090f35b5080fd5b503461008157816003193601126100815760025490516001600160a01b039091168152602090f35b5034610081578160031936011261008157905490516001600160a01b039091168152602090f35b8284346103155760603660031901126103155760248035936044358015150361031157825484516323b872dd60e01b6020808301918252338684015230604484015260648084018a905283529767ffffffffffffffff9390926001600160a01b039260a0820192841691868411818510176102e05760e08101848110888211176102ff578b528b84527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460c082015251899182919082855af1903d156102f2573d8681116102e0578a5190601f19603f81601f84011601168201828110898211176102ce578c5281526101cf939290913d8b8e85013e610403565b88815180610252575b5050506002541690813b1561024e578593929160448592895198899384926305dc812160e31b845233898501528a8401525af180156102445761021f575b86865160018152f35b84116102345750505081528280808080610216565b634e487b7160e01b825260419052fd5b86513d85823e3d90fd5b8580fd5b8290810103126102ca578801518015908115036102ca57610275578888816101d8565b865162461bcd60e51b8152808501899052602a818701527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b8680fd5b634e487b7160e01b8c5260418a528a8cfd5b634e487b7160e01b8a5260418852888afd5b6101cf9291606091610403565b634e487b7160e01b8b5260418952898bfd5b8280fd5b80fd5b5050346100815760203660031901126100815760c0916103366103aa565b5061033f6103aa565b60018060a01b03908180845416948583528160015416906020840191825282818501878152818060025416946060880195865260a060808901988b8a5201998a5284519a8b52511660208a0152511690870152511660608501525116608083015251151560a0820152f35b6040519060c0820182811067ffffffffffffffff8211176103ed576040528160a06000918281528260208201528260408201528260608201528260808201520152565b634e487b7160e01b600052604160045260246000fd5b919290156104655750815115610417575090565b3b156104205790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156104785750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b8285106104be575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061049b56fea2646970667358221220a7d1831d813e39492d9975b6284b2655d5148e921ed2fc2dfb7246cad8d4084064736f6c63430008120033";

type ConvexBoosterMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConvexBoosterMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConvexBoosterMock__factory extends ContractFactory {
  constructor(...args: ConvexBoosterMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _lpToken: PromiseOrValue<string>,
    _receiptToken: PromiseOrValue<string>,
    _crvRewards: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ConvexBoosterMock> {
    return super.deploy(
      _lpToken,
      _receiptToken,
      _crvRewards,
      overrides || {}
    ) as Promise<ConvexBoosterMock>;
  }
  override getDeployTransaction(
    _lpToken: PromiseOrValue<string>,
    _receiptToken: PromiseOrValue<string>,
    _crvRewards: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _lpToken,
      _receiptToken,
      _crvRewards,
      overrides || {}
    );
  }
  override attach(address: string): ConvexBoosterMock {
    return super.attach(address) as ConvexBoosterMock;
  }
  override connect(signer: Signer): ConvexBoosterMock__factory {
    return super.connect(signer) as ConvexBoosterMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConvexBoosterMockInterface {
    return new utils.Interface(_abi) as ConvexBoosterMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConvexBoosterMock {
    return new Contract(address, _abi, signerOrProvider) as ConvexBoosterMock;
  }
}
