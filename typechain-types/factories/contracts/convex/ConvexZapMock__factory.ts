/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ConvexZapMock,
  ConvexZapMockInterface,
} from "../../../contracts/convex/ConvexZapMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_reward1",
        type: "address",
      },
      {
        internalType: "address",
        name: "_reward2",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "reward1",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "reward2",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516105d73803806105d783398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b610519806100be6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635a7b87f214610046578063889069cd1461005b578063facf85b11461008a575b600080fd5b6100596100543660046103a4565b61009d565b005b60005461006e906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b60015461006e906001600160a01b031681565b600054604051637c928fe960e01b8152678ac7230489e8000060048201526001600160a01b0390911690637c928fe990602401600060405180830381600087803b1580156100ea57600080fd5b505af11580156100fe573d6000803e3d6000fd5b5050600154604051637c928fe960e01b8152678ac7230489e8000060048201526001600160a01b039091169250637c928fe99150602401600060405180830381600087803b15801561014f57600080fd5b505af1158015610163573d6000803e3d6000fd5b505060005461018792506001600160a01b0316905033678ac7230489e800006101b1565b6001546101a6906001600160a01b031633678ac7230489e800006101b1565b505050505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161020d919061047f565b6000604051808303816000865af19150503d806000811461024a576040519150601f19603f3d011682016040523d82523d6000602084013e61024f565b606091505b509150915081801561027957508051158061027957508080602001905181019061027991906104ba565b6102c95760405162461bcd60e51b815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604482015260640160405180910390fd5b5050505050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b03811681146102fd57600080fd5b919050565b600082601f83011261031357600080fd5b8135602067ffffffffffffffff80831115610330576103306102d0565b8260051b604051601f19603f83011681018181108482111715610355576103556102d0565b60405293845285810183019383810192508785111561037357600080fd5b83870191505b848210156103995761038a826102e6565b83529183019190830190610379565b979650505050505050565b60008060008060008060008060006101208a8c0312156103c357600080fd5b893567ffffffffffffffff808211156103db57600080fd5b6103e78d838e01610302565b9a5060208c01359150808211156103fd57600080fd5b6104098d838e01610302565b995060408c013591508082111561041f57600080fd5b61042b8d838e01610302565b985060608c013591508082111561044157600080fd5b5061044e8c828d01610302565b999c989b50969960808101359860a0820135985060c0820135975060e0820135965061010090910135945092505050565b6000825160005b818110156104a05760208186018101518583015201610486565b818111156104af576000828501525b509190910192915050565b6000602082840312156104cc57600080fd5b815180151581146104dc57600080fd5b939250505056fea264697066735822122072e254ee09ae903bd82b7248cdd0b66ba158bf3b3f68e70a84c768a0b262012b64736f6c634300080f0033";

type ConvexZapMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConvexZapMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConvexZapMock__factory extends ContractFactory {
  constructor(...args: ConvexZapMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _reward1: PromiseOrValue<string>,
    _reward2: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ConvexZapMock> {
    return super.deploy(
      _reward1,
      _reward2,
      overrides || {}
    ) as Promise<ConvexZapMock>;
  }
  override getDeployTransaction(
    _reward1: PromiseOrValue<string>,
    _reward2: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_reward1, _reward2, overrides || {});
  }
  override attach(address: string): ConvexZapMock {
    return super.attach(address) as ConvexZapMock;
  }
  override connect(signer: Signer): ConvexZapMock__factory {
    return super.connect(signer) as ConvexZapMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConvexZapMockInterface {
    return new utils.Interface(_abi) as ConvexZapMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConvexZapMock {
    return new Contract(address, _abi, signerOrProvider) as ConvexZapMock;
  }
}
