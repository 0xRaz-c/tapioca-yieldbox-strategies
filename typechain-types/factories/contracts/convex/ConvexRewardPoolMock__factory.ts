/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ConvexRewardPoolMock,
  ConvexRewardPoolMockInterface,
} from "../../../contracts/convex/ConvexRewardPoolMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_lpToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_rewardToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lpToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "stakeFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "withdrawAndUnwrap",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60803461008d57601f61058c38819003918201601f19168301916001600160401b0383118484101761009257808492604094855283398101031261008d57610052602061004b836100a8565b92016100a8565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556040516104cf90816100bd8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820361008d5756fe6040608081526004908136101561001557600080fd5b600091823560e01c9081630700037d146103315781632ee409081461021e5781635fcbd285146101f657816370a08231146101c8578163c32e7202146100b657508063f10684541461009b5763f7c618c11461007057600080fd5b3461009757816003193601126100975760015490516001600160a01b039091168152602090f35b5080fd5b50346100975781600319360112610097576020905160018152f35b905082346101c557826003193601126101c557602435801515036101c55760018060a01b038154168351602081019063a9059cbb60e01b825233602482015284356044820152604481526080810181811067ffffffffffffffff8211176101b257849392918491885251925af161012b610423565b81610183575b5015610141576020825160018152f35b6020606492519162461bcd60e51b8352820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c6564000000006044820152fd5b8051801592508215610198575b505083610131565b6101ab9250602080918301019101610463565b8380610190565b634e487b7160e01b855260418652602485fd5b80fd5b505034610097576020366003190112610097576020906101e6610358565b506101ef6103ab565b9051908152f35b505034610097578160031936011261009757905490516001600160a01b039091168152602090f35b9190503461032d578060031936011261032d57610239610358565b5060018060a01b03835416815160208101906323b872dd60e01b825233602482015230604482015260243560648201526064815260a0810181811067ffffffffffffffff82111761031a57845251859283929083905af1610298610423565b816102eb575b50156102a8578280f35b906020606492519162461bcd60e51b8352820152602060248201527f426f72696e6745524332303a205472616e7366657246726f6d206661696c65646044820152fd5b8051801592508215610300575b50503861029e565b6103139250602080918301019101610463565b38806102f8565b634e487b7160e01b875260418652602487fd5b8280fd5b5050346100975760203660031901126100975760209061034f610358565b506101ef61047b565b600435906001600160a01b038216820361036e57565b600080fd5b90601f8019910116810190811067ffffffffffffffff82111761039557604052565b634e487b7160e01b600052604160045260246000fd5b6000546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa908115610417576000916103e9575090565b906020823d821161040f575b8161040260209383610373565b810103126101c557505190565b3d91506103f5565b6040513d6000823e3d90fd5b3d1561045e573d9067ffffffffffffffff82116103955760405191610452601f8201601f191660200184610373565b82523d6000602084013e565b606090565b9081602091031261036e5751801515810361036e5790565b6104836103ab565b1561049457678ac7230489e8000090565b60009056fea2646970667358221220fe2c09cada90b391640cb671cdff18ba33ef30415382cbeecda6cb6167a1eb7564736f6c63430008120033";

type ConvexRewardPoolMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConvexRewardPoolMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConvexRewardPoolMock__factory extends ContractFactory {
  constructor(...args: ConvexRewardPoolMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _lpToken: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ConvexRewardPoolMock> {
    return super.deploy(
      _lpToken,
      _rewardToken,
      overrides || {}
    ) as Promise<ConvexRewardPoolMock>;
  }
  override getDeployTransaction(
    _lpToken: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_lpToken, _rewardToken, overrides || {});
  }
  override attach(address: string): ConvexRewardPoolMock {
    return super.attach(address) as ConvexRewardPoolMock;
  }
  override connect(signer: Signer): ConvexRewardPoolMock__factory {
    return super.connect(signer) as ConvexRewardPoolMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConvexRewardPoolMockInterface {
    return new utils.Interface(_abi) as ConvexRewardPoolMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConvexRewardPoolMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ConvexRewardPoolMock;
  }
}
