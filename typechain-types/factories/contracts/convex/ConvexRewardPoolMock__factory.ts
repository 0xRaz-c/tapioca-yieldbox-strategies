/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ConvexRewardPoolMock,
  ConvexRewardPoolMockInterface,
} from "../../../contracts/convex/ConvexRewardPoolMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_lpToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_rewardToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lpToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "stakeFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "withdrawAndUnwrap",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161066338038061066383398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b6105a5806100be6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806370a082311161005b57806370a08231146100e8578063c32e7202146100fb578063f10684541461011e578063f7c618c11461012557600080fd5b80630700037d146100825780632ee40908146100a85780635fcbd285146100bd575b600080fd5b610095610090366004610478565b610138565b6040519081526020015b60405180910390f35b6100bb6100b6366004610493565b610167565b005b6000546100d0906001600160a01b031681565b6040516001600160a01b03909116815260200161009f565b6100956100f6366004610478565b610183565b61010e6101093660046104ce565b6101f7565b604051901515815260200161009f565b6001610095565b6001546100d0906001600160a01b031681565b60008061014430610183565b9050806000036101575750600092915050565b50678ac7230489e8000092915050565b60005461017f906001600160a01b0316333084610218565b5050565b600080546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa1580156101cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f091906104fe565b9392505050565b6000805461020f906001600160a01b03163385610341565b50600192915050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161027c9190610517565b6000604051808303816000865af19150503d80600081146102b9576040519150601f19603f3d011682016040523d82523d6000602084013e6102be565b606091505b50915091508180156102e85750805115806102e85750808060200190518101906102e89190610552565b6103395760405162461bcd60e51b815260206004820181905260248201527f426f72696e6745524332303a205472616e7366657246726f6d206661696c656460448201526064015b60405180910390fd5b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161039d9190610517565b6000604051808303816000865af19150503d80600081146103da576040519150601f19603f3d011682016040523d82523d6000602084013e6103df565b606091505b50915091508180156104095750805115806104095750808060200190518101906104099190610552565b6104555760405162461bcd60e51b815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c6564000000006044820152606401610330565b5050505050565b80356001600160a01b038116811461047357600080fd5b919050565b60006020828403121561048a57600080fd5b6101f08261045c565b600080604083850312156104a657600080fd5b6104af8361045c565b946020939093013593505050565b80151581146104cb57600080fd5b50565b600080604083850312156104e157600080fd5b8235915060208301356104f3816104bd565b809150509250929050565b60006020828403121561051057600080fd5b5051919050565b6000825160005b81811015610538576020818601810151858301520161051e565b81811115610547576000828501525b509190910192915050565b60006020828403121561056457600080fd5b81516101f0816104bd56fea2646970667358221220059d4ac7d45a62a169afde7df4ac770f943b291e615915732dc23ffe5b85213364736f6c634300080f0033";

type ConvexRewardPoolMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConvexRewardPoolMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConvexRewardPoolMock__factory extends ContractFactory {
  constructor(...args: ConvexRewardPoolMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _lpToken: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ConvexRewardPoolMock> {
    return super.deploy(
      _lpToken,
      _rewardToken,
      overrides || {}
    ) as Promise<ConvexRewardPoolMock>;
  }
  override getDeployTransaction(
    _lpToken: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_lpToken, _rewardToken, overrides || {});
  }
  override attach(address: string): ConvexRewardPoolMock {
    return super.attach(address) as ConvexRewardPoolMock;
  }
  override connect(signer: Signer): ConvexRewardPoolMock__factory {
    return super.connect(signer) as ConvexRewardPoolMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConvexRewardPoolMockInterface {
    return new utils.Interface(_abi) as ConvexRewardPoolMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConvexRewardPoolMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ConvexRewardPoolMock;
  }
}
