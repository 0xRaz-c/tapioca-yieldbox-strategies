/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  IncentivesControllerMock,
  IncentivesControllerMockInterface,
} from "../../../../contracts/aave/mocks/IncentivesControllerMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "REWARD_TOKEN",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "claimRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "getRewardsBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "getUserUnclaimedRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract ERC20Mock",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60803461007457601f6103aa38819003918201601f19168301916001600160401b038311848410176100795780849260209460405283398101031261007457516001600160a01b0381169081900361007457600080546001600160a01b03191691909117905560405161031a90816100908239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004918236101561001657600080fd5b600092833560e01c918263198fa81e1461027f575081633111e7b31461010f5781638b599f26146100ad5750806399248ea7146100865763fc0c546a1461005c57600080fd5b34610082578160031936011261008257905490516001600160a01b039091168152602090f35b5080fd5b5034610082578160031936011261008257905490516001600160a01b039091168152602090f35b90503461010b578160031936011261010b57803567ffffffffffffffff8111610107576100dc913691016102b3565b50506024356001600160a01b03811603610102576020905168056bc75e2d631000008152f35b600080fd5b8380fd5b8280fd5b9190503461010b57606036600319011261010b5767ffffffffffffffff91803583811161027b5761014390369083016102b3565b506001600160a01b0393905060443584811690819003610277578486541694853b15610273578451637c928fe960e01b815287816024818368056bc75e2d631000009b8c8b8401525af1801561026957610240575b50869392916044602092865416918751968793849263a9059cbb60e01b8452888401528a60248401525af18015610236576101d8575b6020858551908152f35b6020913d831161022e575b601f8301601f19168401918211848310176102195750602091839185528101031261010757518015150361010b578280806101ce565b604190634e487b7160e01b6000525260246000fd5b3d92506101e3565b84513d88823e3d90fd5b8381989295981161025657855295926020610198565b634e487b7160e01b825260418852602482fd5b86513d8a823e3d90fd5b8680fd5b8580fd5b8480fd5b84913461010b57602036600319011261010b57356001600160a01b03811603610082578068056bc75e2d6310000060209252f35b9181601f840112156101025782359167ffffffffffffffff8311610102576020808501948460051b0101116101025756fea26469706673582212206695b80956e4da0aac34bd16f3c86ffe1de758fd06ae28ccacd3cfec9f04c44c64736f6c63430008120033";

type IncentivesControllerMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IncentivesControllerMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IncentivesControllerMock__factory extends ContractFactory {
  constructor(...args: IncentivesControllerMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<IncentivesControllerMock> {
    return super.deploy(
      _token,
      overrides || {}
    ) as Promise<IncentivesControllerMock>;
  }
  override getDeployTransaction(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, overrides || {});
  }
  override attach(address: string): IncentivesControllerMock {
    return super.attach(address) as IncentivesControllerMock;
  }
  override connect(signer: Signer): IncentivesControllerMock__factory {
    return super.connect(signer) as IncentivesControllerMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IncentivesControllerMockInterface {
    return new utils.Interface(_abi) as IncentivesControllerMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IncentivesControllerMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IncentivesControllerMock;
  }
}
