/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  StkAaveMock,
  StkAaveMockInterface,
} from "../../../contracts/aave/StkAaveMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "REWARD_TOKEN",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "cooldown",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_val",
        type: "uint256",
      },
    ],
    name: "freeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lastCooldown",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "stakerRewardsToClaim",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "stakersCooldowns",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract ERC20Mock",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x610100604052600a60c0908152692a32b9ba102a37b5b2b760b11b60e0526004906200002c908262000204565b50604080518082019091526002815261151560f21b602082015260059062000055908262000204565b506006805460ff191660121790553480156200007057600080fd5b504660a081905269152d02c7e14af680000090620000e190604080517f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692186020820152908101829052306060820152600090608001604051602081830303815290604052805190602001209050919050565b60805260035560405169021e19e0c9bab240000090620001019062000151565b908152602001604051809103906000f08015801562000124573d6000803e3d6000fd5b50600660016101000a8154816001600160a01b0302191690836001600160a01b03160217905550620002d0565b61102c806200129e83390190565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200018a57607f821691505b602082108103620001ab57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001ff57600081815260208120601f850160051c81016020861015620001da5750805b601f850160051c820191505b81811015620001fb57828155600101620001e6565b5050505b505050565b81516001600160401b038111156200022057620002206200015f565b620002388162000231845462000175565b84620001b1565b602080601f831160018114620002705760008415620002575750858301515b600019600386901b1c1916600185901b178555620001fb565b600085815260208120601f198616915b82811015620002a15788860151825594840194600190910190840162000280565b5085821015620002c05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a051610fa8620002f66000396000610b1601526000610b470152610fa86000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80637e90d7ef116100ad578063a9059cbb11610071578063a9059cbb1461028e578063b612db4b146102a1578063d505accf146102aa578063dd62ed3e146102bd578063fc0c546a146102e857600080fd5b80637e90d7ef146102165780637ecebe001461022957806395d89b411461024957806399248ea7146102515780639a99b4f01461027b57600080fd5b8063313ce567116100f4578063313ce567146101b15780633644e515146101d057806370a08231146101d8578063787a08a6146101f85780637c928fe91461020357600080fd5b806306fdde0314610131578063091030c31461014f578063095ea7b31461017257806318160ddd1461019557806323b872dd1461019e575b600080fd5b610139610300565b6040516101469190610cfb565b60405180910390f35b61016461015d366004610d4a565b5060075490565b604051908152602001610146565b610185610180366004610d6c565b61038e565b6040519015158152602001610146565b61016460035481565b6101856101ac366004610d96565b6103fa565b6006546101be9060ff1681565b60405160ff9091168152602001610146565b61016461061d565b6101646101e6366004610d4a565b60006020819052908152604090205481565b61020142600755565b005b610201610211366004610dd2565b61062c565b610164610224366004610d4a565b610639565b610164610237366004610d4a565b60026020526000908152604090205481565b61013961066b565b60065461010090046001600160a01b03165b6040516001600160a01b039091168152602001610146565b610201610289366004610d6c565b610678565b61018561029c366004610d6c565b610768565b61016460075481565b6102016102b8366004610deb565b6108bf565b6101646102cb366004610e5e565b600160209081526000928352604080842090915290825290205481565b6006546102639061010090046001600160a01b031681565b6004805461030d90610e91565b80601f016020809104026020016040519081016040528092919081815260200182805461033990610e91565b80156103865780601f1061035b57610100808354040283529160200191610386565b820191906000526020600020905b81548152906001019060200180831161036957829003601f168201915b505050505081565b3360008181526001602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906103e99086815260200190565b60405180910390a350600192915050565b600081156105c6576001600160a01b038416600090815260208190526040902054828110156104695760405162461bcd60e51b815260206004820152601660248201527545524332303a2062616c616e636520746f6f206c6f7760501b60448201526064015b60405180910390fd5b836001600160a01b0316856001600160a01b0316146105c4576001600160a01b0385166000908152600160209081526040808320338452909152902054600019811461052e57838110156104ff5760405162461bcd60e51b815260206004820152601860248201527f45524332303a20616c6c6f77616e636520746f6f206c6f7700000000000000006044820152606401610460565b6105098482610ee1565b6001600160a01b03871660009081526001602090815260408083203384529091529020555b6001600160a01b03851661057d5760405162461bcd60e51b815260206004820152601660248201527545524332303a206e6f207a65726f206164647265737360501b6044820152606401610460565b6105878483610ee1565b6001600160a01b0380881660009081526020819052604080822093909355908716815290812080548692906105bd908490610ef8565b9091555050505b505b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161060b91815260200190565b60405180910390a35060019392505050565b6000610627610b12565b905090565b6106363382610b69565b50565b600042600754620fd20061064d9190610ef8565b101561065b57506000919050565b5068056bc75e2d63100000919050565b6005805461030d90610e91565b6106826000610639565b600654604051637c928fe960e01b81526004810183905291925061010090046001600160a01b031690637c928fe990602401600060405180830381600087803b1580156106ce57600080fd5b505af11580156106e2573d6000803e3d6000fd5b505060065460405163a9059cbb60e01b81526001600160a01b03868116600483015260248201869052610100909204909116925063a9059cbb91506044016020604051808303816000875af115801561073f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107639190610f10565b505050565b6000811515806107805750336001600160a01b038416145b156108825733600090815260208190526040902054828110156107de5760405162461bcd60e51b815260206004820152601660248201527545524332303a2062616c616e636520746f6f206c6f7760501b6044820152606401610460565b336001600160a01b03851614610880576001600160a01b03841661083d5760405162461bcd60e51b815260206004820152601660248201527545524332303a206e6f207a65726f206164647265737360501b6044820152606401610460565b6108478382610ee1565b33600090815260208190526040808220929092556001600160a01b0386168152908120805485929061087a908490610ef8565b90915550505b505b6040518281526001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016103e9565b6001600160a01b0387166109155760405162461bcd60e51b815260206004820152601860248201527f45524332303a204f776e65722063616e6e6f74206265203000000000000000006044820152606401610460565b8342106109555760405162461bcd60e51b815260206004820152600e60248201526d115490cc8c0e88115e1c1a5c995960921b6044820152606401610460565b6001600160a01b038716600081815260026020526040812080546001926109ff927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928d928d928d92916109a883610f32565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810188905260e00160405160208183030381529060405280519060200120610c35565b6040805160008152602081018083529290925260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015610a4d573d6000803e3d6000fd5b505050602060405103516001600160a01b031614610aad5760405162461bcd60e51b815260206004820152601860248201527f45524332303a20496e76616c6964205369676e617475726500000000000000006044820152606401610460565b6001600160a01b038781166000818152600160209081526040808320948b168084529482529182902089905590518881527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614610b445761062746610c8a565b507f000000000000000000000000000000000000000000000000000000000000000090565b600081600354610b799190610ef8565b9050600354811015610bbd5760405162461bcd60e51b815260206004820152600d60248201526c4d696e74206f766572666c6f7760981b6044820152606401610460565b60038190556001600160a01b03831660009081526020819052604081208054849290610bea908490610ef8565b90915550506040518281526001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b600060405180604001604052806002815260200161190160f01b815250610c5a610b12565b83604051602001610c6d93929190610f4b565b604051602081830303815290604052805190602001209050919050565b604080517f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692186020820152908101829052306060820152600090608001610c6d565b60005b83811015610ce6578181015183820152602001610cce565b83811115610cf5576000848401525b50505050565b6020815260008251806020840152610d1a816040850160208701610ccb565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610d4557600080fd5b919050565b600060208284031215610d5c57600080fd5b610d6582610d2e565b9392505050565b60008060408385031215610d7f57600080fd5b610d8883610d2e565b946020939093013593505050565b600080600060608486031215610dab57600080fd5b610db484610d2e565b9250610dc260208501610d2e565b9150604084013590509250925092565b600060208284031215610de457600080fd5b5035919050565b600080600080600080600060e0888a031215610e0657600080fd5b610e0f88610d2e565b9650610e1d60208901610d2e565b95506040880135945060608801359350608088013560ff81168114610e4157600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610e7157600080fd5b610e7a83610d2e565b9150610e8860208401610d2e565b90509250929050565b600181811c90821680610ea557607f821691505b602082108103610ec557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082821015610ef357610ef3610ecb565b500390565b60008219821115610f0b57610f0b610ecb565b500190565b600060208284031215610f2257600080fd5b81518015158114610d6557600080fd5b600060018201610f4457610f44610ecb565b5060010190565b60008451610f5d818460208901610ccb565b9190910192835250602082015260400191905056fea2646970667358221220b8993dead0afc02b9f362732291d840d25e69e7345feb47a55b59d4909a14e3d64736f6c634300080f0033610100604052600a60c0908152692a32b9ba102a37b5b2b760b11b60e0526004906200002c9082620001a8565b50604080518082019091526002815261151560f21b6020820152600590620000559082620001a8565b506006805460ff191660121790553480156200007057600080fd5b506040516200102c3803806200102c833981016040819052620000939162000274565b4660a0819052620000f790604080517f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692186020820152908101829052306060820152600090608001604051602081830303815290604052805190602001209050919050565b6080526003556200028e565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200012e57607f821691505b6020821081036200014f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001a357600081815260208120601f850160051c810160208610156200017e5750805b601f850160051c820191505b818110156200019f578281556001016200018a565b5050505b505050565b81516001600160401b03811115620001c457620001c462000103565b620001dc81620001d5845462000119565b8462000155565b602080601f831160018114620002145760008415620001fb5750858301515b600019600386901b1c1916600185901b1785556200019f565b600085815260208120601f198616915b82811015620002455788860151825594840194600190910190840162000224565b5085821015620002645787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156200028757600080fd5b5051919050565b60805160a051610d78620002b46000396000610908015260006109390152610d786000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806370a082311161008c57806395d89b411161006657806395d89b41146101bb578063a9059cbb146101c3578063d505accf146101d6578063dd62ed3e146101e957600080fd5b806370a08231146101665780637c928fe9146101865780637ecebe001461019b57600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd1461012c578063313ce5671461013f5780633644e5151461015e575b600080fd5b6100dc610214565b6040516100e99190610aed565b60405180910390f35b610105610100366004610b3c565b6102a2565b60405190151581526020016100e9565b61011e60035481565b6040519081526020016100e9565b61010561013a366004610b66565b61030e565b60065461014c9060ff1681565b60405160ff90911681526020016100e9565b61011e610531565b61011e610174366004610ba2565b60006020819052908152604090205481565b610199610194366004610bc4565b610540565b005b61011e6101a9366004610ba2565b60026020526000908152604090205481565b6100dc61054d565b6101056101d1366004610b3c565b61055a565b6101996101e4366004610bdd565b6106b1565b61011e6101f7366004610c50565b600160209081526000928352604080842090915290825290205481565b6004805461022190610c83565b80601f016020809104026020016040519081016040528092919081815260200182805461024d90610c83565b801561029a5780601f1061026f5761010080835404028352916020019161029a565b820191906000526020600020905b81548152906001019060200180831161027d57829003601f168201915b505050505081565b3360008181526001602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906102fd9086815260200190565b60405180910390a350600192915050565b600081156104da576001600160a01b0384166000908152602081905260409020548281101561037d5760405162461bcd60e51b815260206004820152601660248201527545524332303a2062616c616e636520746f6f206c6f7760501b60448201526064015b60405180910390fd5b836001600160a01b0316856001600160a01b0316146104d8576001600160a01b0385166000908152600160209081526040808320338452909152902054600019811461044257838110156104135760405162461bcd60e51b815260206004820152601860248201527f45524332303a20616c6c6f77616e636520746f6f206c6f7700000000000000006044820152606401610374565b61041d8482610cd3565b6001600160a01b03871660009081526001602090815260408083203384529091529020555b6001600160a01b0385166104915760405162461bcd60e51b815260206004820152601660248201527545524332303a206e6f207a65726f206164647265737360501b6044820152606401610374565b61049b8483610cd3565b6001600160a01b0380881660009081526020819052604080822093909355908716815290812080548692906104d1908490610cea565b9091555050505b505b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161051f91815260200190565b60405180910390a35060019392505050565b600061053b610904565b905090565b61054a338261095b565b50565b6005805461022190610c83565b6000811515806105725750336001600160a01b038416145b156106745733600090815260208190526040902054828110156105d05760405162461bcd60e51b815260206004820152601660248201527545524332303a2062616c616e636520746f6f206c6f7760501b6044820152606401610374565b336001600160a01b03851614610672576001600160a01b03841661062f5760405162461bcd60e51b815260206004820152601660248201527545524332303a206e6f207a65726f206164647265737360501b6044820152606401610374565b6106398382610cd3565b33600090815260208190526040808220929092556001600160a01b0386168152908120805485929061066c908490610cea565b90915550505b505b6040518281526001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016102fd565b6001600160a01b0387166107075760405162461bcd60e51b815260206004820152601860248201527f45524332303a204f776e65722063616e6e6f74206265203000000000000000006044820152606401610374565b8342106107475760405162461bcd60e51b815260206004820152600e60248201526d115490cc8c0e88115e1c1a5c995960921b6044820152606401610374565b6001600160a01b038716600081815260026020526040812080546001926107f1927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928d928d928d929161079a83610d02565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810188905260e00160405160208183030381529060405280519060200120610a27565b6040805160008152602081018083529290925260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa15801561083f573d6000803e3d6000fd5b505050602060405103516001600160a01b03161461089f5760405162461bcd60e51b815260206004820152601860248201527f45524332303a20496e76616c6964205369676e617475726500000000000000006044820152606401610374565b6001600160a01b038781166000818152600160209081526040808320948b168084529482529182902089905590518881527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000046146109365761053b46610a7c565b507f000000000000000000000000000000000000000000000000000000000000000090565b60008160035461096b9190610cea565b90506003548110156109af5760405162461bcd60e51b815260206004820152600d60248201526c4d696e74206f766572666c6f7760981b6044820152606401610374565b60038190556001600160a01b038316600090815260208190526040812080548492906109dc908490610cea565b90915550506040518281526001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b600060405180604001604052806002815260200161190160f01b815250610a4c610904565b83604051602001610a5f93929190610d1b565b604051602081830303815290604052805190602001209050919050565b604080517f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692186020820152908101829052306060820152600090608001610a5f565b60005b83811015610ad8578181015183820152602001610ac0565b83811115610ae7576000848401525b50505050565b6020815260008251806020840152610b0c816040850160208701610abd565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610b3757600080fd5b919050565b60008060408385031215610b4f57600080fd5b610b5883610b20565b946020939093013593505050565b600080600060608486031215610b7b57600080fd5b610b8484610b20565b9250610b9260208501610b20565b9150604084013590509250925092565b600060208284031215610bb457600080fd5b610bbd82610b20565b9392505050565b600060208284031215610bd657600080fd5b5035919050565b600080600080600080600060e0888a031215610bf857600080fd5b610c0188610b20565b9650610c0f60208901610b20565b95506040880135945060608801359350608088013560ff81168114610c3357600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610c6357600080fd5b610c6c83610b20565b9150610c7a60208401610b20565b90509250929050565b600181811c90821680610c9757607f821691505b602082108103610cb757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082821015610ce557610ce5610cbd565b500390565b60008219821115610cfd57610cfd610cbd565b500190565b600060018201610d1457610d14610cbd565b5060010190565b60008451610d2d818460208901610abd565b9190910192835250602082015260400191905056fea26469706673582212205716ff96a10cf3de7cdff9174e48d763de3accb8a4969a595cc4adc83e311b8264736f6c634300080f0033";

type StkAaveMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StkAaveMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StkAaveMock__factory extends ContractFactory {
  constructor(...args: StkAaveMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StkAaveMock> {
    return super.deploy(overrides || {}) as Promise<StkAaveMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): StkAaveMock {
    return super.attach(address) as StkAaveMock;
  }
  override connect(signer: Signer): StkAaveMock__factory {
    return super.connect(signer) as StkAaveMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StkAaveMockInterface {
    return new utils.Interface(_abi) as StkAaveMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StkAaveMock {
    return new Contract(address, _abi, signerOrProvider) as StkAaveMock;
  }
}
