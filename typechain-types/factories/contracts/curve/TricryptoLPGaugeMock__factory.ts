/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TricryptoLPGaugeMock,
  TricryptoLPGaugeMockInterface,
} from "../../../contracts/curve/TricryptoLPGaugeMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_lpToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_rewardToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "claimable_tokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "crv_token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lpToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161064d38038061064d83398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b61058f806100be6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806370a082311161005b57806370a08231146100f057806376d8b1171461010357806383df674714610114578063f7c618c11461012757600080fd5b8063331345831461008257806338d07436146100b05780635fcbd285146100c5575b600080fd5b61009d610090366004610445565b50678ac7230489e8000090565b6040519081526020015b60405180910390f35b6100c36100be366004610478565b61013a565b005b6000546100d8906001600160a01b031681565b6040516001600160a01b0390911681526020016100a7565b61009d6100fe366004610445565b610155565b6001546001600160a01b03166100d8565b6100c36101223660046104a8565b6101c8565b6001546100d8906001600160a01b031681565b600054610151906001600160a01b031633846101e5565b5050565b600080546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561019e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c291906104e8565b92915050565b6000546101e0906001600160a01b0316333086610305565b505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916102419190610501565b6000604051808303816000865af19150503d806000811461027e576040519150601f19603f3d011682016040523d82523d6000602084013e610283565b606091505b50915091508180156102ad5750805115806102ad5750808060200190518101906102ad919061053c565b6102fe5760405162461bcd60e51b815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c65640000000060448201526064015b60405180910390fd5b5050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916103699190610501565b6000604051808303816000865af19150503d80600081146103a6576040519150601f19603f3d011682016040523d82523d6000602084013e6103ab565b606091505b50915091508180156103d55750805115806103d55750808060200190518101906103d5919061053c565b6104215760405162461bcd60e51b815260206004820181905260248201527f426f72696e6745524332303a205472616e7366657246726f6d206661696c656460448201526064016102f5565b505050505050565b80356001600160a01b038116811461044057600080fd5b919050565b60006020828403121561045757600080fd5b61046082610429565b9392505050565b801515811461047557600080fd5b50565b6000806040838503121561048b57600080fd5b82359150602083013561049d81610467565b809150509250929050565b6000806000606084860312156104bd57600080fd5b833592506104cd60208501610429565b915060408401356104dd81610467565b809150509250925092565b6000602082840312156104fa57600080fd5b5051919050565b6000825160005b818110156105225760208186018101518583015201610508565b81811115610531576000828501525b509190910192915050565b60006020828403121561054e57600080fd5b81516104608161046756fea2646970667358221220be960155126127225df3dc101d2bee13cf6922edcfc6cbf1e6086b30332e8b2964736f6c634300080f0033";

type TricryptoLPGaugeMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TricryptoLPGaugeMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TricryptoLPGaugeMock__factory extends ContractFactory {
  constructor(...args: TricryptoLPGaugeMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _lpToken: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TricryptoLPGaugeMock> {
    return super.deploy(
      _lpToken,
      _rewardToken,
      overrides || {}
    ) as Promise<TricryptoLPGaugeMock>;
  }
  override getDeployTransaction(
    _lpToken: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_lpToken, _rewardToken, overrides || {});
  }
  override attach(address: string): TricryptoLPGaugeMock {
    return super.attach(address) as TricryptoLPGaugeMock;
  }
  override connect(signer: Signer): TricryptoLPGaugeMock__factory {
    return super.connect(signer) as TricryptoLPGaugeMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TricryptoLPGaugeMockInterface {
    return new utils.Interface(_abi) as TricryptoLPGaugeMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TricryptoLPGaugeMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TricryptoLPGaugeMock;
  }
}
