/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TricryptoLiquidityPoolMock,
  TricryptoLiquidityPoolMockInterface,
} from "../../../contracts/curve/TricryptoLiquidityPoolMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_weth",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256[3]",
        name: "amounts",
        type: "uint256[3]",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "add_liquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[3]",
        name: "amounts",
        type: "uint256[3]",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "calc_token_amount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "token_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "calc_withdraw_one_coin",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_token_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "remove_liquidity_one_coin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract ERC20Mock",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "weth",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080346100f2576001600160401b0390601f61146a38819003918201601f1916830191848311848410176100dc578084926020946040528339810103126100f257516001600160a01b038082169290918390036100f257600180546001600160a01b0319908116909417905560405190610e5a808301918211838310176100dc57602091839161061083397d90e40fbeea1d3a4abc8955e946fe31cdcf66f634e100000000000000000081520301906000f080156100d0571690600054161760005560405161051890816100f88239f35b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c9182633883e1191461041d575081633fc8cef3146103f45781634515cef3146102275781634fb08c5e14610209578163f1dc3cc914610091575063fc0c546a1461006757600080fd5b3461008d578160031936011261008d57905490516001600160a01b039091168152602090f35b5080fd5b9190503461020557606036600319011261020557825481516323b872dd60e01b81523381850190815230602082810191909152853560408301819052909493879391926001600160a01b0392918791839185169082908890829060600103925af180156101fb5790849392916101ce575b50600154855163a9059cbb60e01b888201908152336024830152604482019490945291169190839061014181606481015b03601f19810183528261044d565b51925af161014d6104a2565b8161019e575b501561015d578380f35b5162461bcd60e51b815291820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604482015260649150fd5b805180159250849083156101b6575b50505038610153565b6101c69350820181019101610485565b3883816101ad565b6101ed90873d89116101f4575b6101e5818361044d565b810190610485565b5038610102565b503d6101db565b85513d86823e3d90fd5b8280fd5b91905034610205578060031936011261020557602092505190358152f35b9190503461020557608036600319011261020557366064116102055760015481516323b872dd60e01b60208083019182523360248401523060448481019190915235606484018190529095909390926001600160a01b039288928392908516919083906102978160848101610133565b51925af16102a36104a2565b816103c4575b5015610383578581815416803b1561008d5781906024875180948193637c928fe960e01b835289898401525af180156103795761034b575b508554845163a9059cbb60e01b815233938101938452602084019490945292939285928592908390036040019183918991165af19081156103425750610325578280f35b8161033b92903d106101f4576101e5818361044d565b5038808280f35b513d85823e3d90fd5b67ffffffffffffffff819792971161036657845294846102e1565b506041602492634e487b7160e01b835252fd5b85513d89823e3d90fd5b606482868087519262461bcd60e51b845283015260248201527f426f72696e6745524332303a205472616e7366657246726f6d206661696c65646044820152fd5b805180159250879083156103dc575b505050386102a9565b6103ec9350820181019101610485565b3886816103d3565b50503461008d578160031936011261008d5760015490516001600160a01b039091168152602090f35b84903461008d57608036600319011261008d573660641161008d576064358015150361008d576020906044358152f35b90601f8019910116810190811067ffffffffffffffff82111761046f57604052565b634e487b7160e01b600052604160045260246000fd5b9081602091031261049d5751801515810361049d5790565b600080fd5b3d156104dd573d9067ffffffffffffffff821161046f57604051916104d1601f8201601f19166020018461044d565b82523d6000602084013e565b60609056fea2646970667358221220f67103f7391edf8e9863b32662ab506e5dd32cdac27c55f090f497cc3a43a58a64736f6c6343000812003360c03461019a576001600160401b0390601f62000e5a38819003918201601f1916830191848311848410176101845780849260209460405283398101031261019a5751904660a05260405160208101917f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218835246604083015230606083015260608252608082019082821090821117610184576040525190206080526100a660045461019f565b601f8111610156575b507f5465737420546f6b656e000000000000000000000000000000000000000000146004556005546100e09061019f565b601f8111610128575b50600461151560f21b016005556006805460ff19166012179055600355604051610c809081620001da823960805181610b97015260a05181610b700152f35b600060058152601f60208220920160051c8201915b82811061014b5750506100e9565b81815560010161013d565b600060048152601f60208220920160051c8201915b8281106101795750506100af565b81815560010161016b565b634e487b7160e01b600052604160045260246000fd5b600080fd5b90600182811c921680156101cf575b60208310146101b957565b634e487b7160e01b600052602260045260246000fd5b91607f16916101ae56fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde031461090757508163095ea7b31461089657816318160ddd1461087757816323b872dd146106d5578163313ce567146106b35781633644e5151461068f57816370a08231146106585781637c928fe9146105c35781637ecebe001461058b57816395d89b4114610488578163a9059cbb146103af578163d505accf146100ff575063dd62ed3e146100b457600080fd5b346100fb57806003193601126100fb57806020926100d0610a80565b6100d8610a9b565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b9050346103ab5760e03660031901126103ab5761011a610a80565b90610123610a9b565b9260443590606435926084359460ff86168096036103a7576001600160a01b0390811695861561036457854210156103305786895260209560028752848a20988954996000198b1461031d5760018b01905585519184898401927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c984528b89860152169a8b606085015288608085015260a084015260c083015260c0825260e082019167ffffffffffffffff918184108385111761030a57838852815190209161012082019081118482101761030a579260809261024c60608f968d9895610100918d5260028652019361190160f01b855261021d610b6b565b8c519485926102348c850198899251928391610a31565b8301918b8301528d820152038b8101845201826109f9565b5190209087519182528482015260a4358782015260c435606082015282805260015afa15610300578590885116036102bf5750907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259291848752600183528087208688528352818188205551908152a380f35b83606492519162461bcd60e51b8352820152601860248201527f45524332303a20496e76616c6964205369676e617475726500000000000000006044820152fd5b82513d89823e3d90fd5b634e487b7160e01b8d526041875260248dfd5b634e487b7160e01b8c526011865260248cfd5b835162461bcd60e51b8152602081850152600e60248201526d115490cc8c0e88115e1c1a5c995960921b6044820152606490fd5b835162461bcd60e51b8152602081850152601860248201527f45524332303a204f776e65722063616e6e6f74206265203000000000000000006044820152606490fd5b8780fd5b8280fd5b5050346100fb57806003193601126100fb576020916103cc610a80565b82602435928315801590610476575b61040b575b50519182526001600160a01b0316903390600080516020610c2b833981519152908590a35160018152f35b3381528086528181205461042185821015610ab1565b6001600160a01b03841690853383900361043e575b5050506103e0565b6104529161044d841515610af6565b610b3b565b3383528288528383205581522061046a838254610b5e565b90558238808085610436565b50336001600160a01b038416146103db565b919050346103ab57826003193601126103ab57805191836005549060019082821c928281168015610581575b602095868610821461056e575084885290811561054c57506001146104f3575b6104ef86866104e5828b03836109f9565b5191829182610a54565b0390f35b929550600583527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b82841061053957505050826104ef946104e59282010194386104d4565b805486850188015292860192810161051c565b60ff191687860152505050151560051b83010192506104e5826104ef386104d4565b634e487b7160e01b845260229052602483fd5b93607f16936104b4565b5050346100fb5760203660031901126100fb5760209181906001600160a01b036105b3610a80565b1681526002845220549051908152f35b919050346103ab5760203660031901126103ab576003548235926105e78483610b5e565b918210610625575060035533835282602052808320610607838254610b5e565b90555190815281600080516020610c2b83398151915260203393a380f35b606490602084519162461bcd60e51b8352820152600d60248201526c4d696e74206f766572666c6f7760981b6044820152fd5b5050346100fb5760203660031901126100fb5760209181906001600160a01b03610680610a80565b16815280845220549051908152f35b5050346100fb57816003193601126100fb576020906106ac610b6b565b9051908152f35b5050346100fb57816003193601126100fb5760209060ff600654169051908152f35b828434610874576060366003190112610874576106f0610a80565b906106f9610a9b565b6044359182610735575b508351918252602094506001600160a01b03908116921690600080516020610c2b833981519152908590a35160018152f35b6001600160a01b0384811680835260208381528784205491989290919061075e87831015610ab1565b851692838a03610772575b50505050610703565b898552600183528885203386528352888520549060001982036107dc575b50509282602099828a946107bb8a8e9961044d600080516020610c2b8339815191529c9a1515610af6565b92825252838320558152206107d1858254610b5e565b905591878080610769565b878210610831575092602099858a946107bb8a8e999661080c82600080516020610c2b8339815191529d9b610b3b565b8686526001855289862033875285528986205596505050945095509981949650610790565b895162461bcd60e51b8152908101849052601860248201527f45524332303a20616c6c6f77616e636520746f6f206c6f7700000000000000006044820152606490fd5b80fd5b5050346100fb57816003193601126100fb576020906003549051908152f35b5050346100fb57806003193601126100fb57602091816108b4610a80565b91602435918291338152600187528181209460018060a01b0316948582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b838534610874578060031936011261087457809380549160019083821c928285169485156109ef575b60209586861081146109dc578589529081156109b85750600114610960575b6104ef87876104e5828c03836109f9565b81529295507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106109a557505050826104ef946104e59282010194868061094f565b8054868501880152928601928101610987565b60ff19168887015250505050151560051b83010192506104e5826104ef868061094f565b634e487b7160e01b845260228352602484fd5b93607f1693610930565b90601f8019910116810190811067ffffffffffffffff821117610a1b57604052565b634e487b7160e01b600052604160045260246000fd5b60005b838110610a445750506000910152565b8181015183820152602001610a34565b60409160208252610a748151809281602086015260208686019101610a31565b601f01601f1916010190565b600435906001600160a01b0382168203610a9657565b600080fd5b602435906001600160a01b0382168203610a9657565b15610ab857565b60405162461bcd60e51b815260206004820152601660248201527545524332303a2062616c616e636520746f6f206c6f7760501b6044820152606490fd5b15610afd57565b60405162461bcd60e51b815260206004820152601660248201527545524332303a206e6f207a65726f206164647265737360501b6044820152606490fd5b91908203918211610b4857565b634e487b7160e01b600052601160045260246000fd5b91908201809211610b4857565b6000467f000000000000000000000000000000000000000000000000000000000000000003610bb957507f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101917f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218835246604083015230606083015260608252608082019082821067ffffffffffffffff831117610c16575060405251902090565b634e487b7160e01b81526041600452602490fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220466027d8289aaeef324326fca5bc94773eb5da1741eec773a87e81647bb133d464736f6c63430008120033";

type TricryptoLiquidityPoolMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TricryptoLiquidityPoolMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TricryptoLiquidityPoolMock__factory extends ContractFactory {
  constructor(...args: TricryptoLiquidityPoolMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _weth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TricryptoLiquidityPoolMock> {
    return super.deploy(
      _weth,
      overrides || {}
    ) as Promise<TricryptoLiquidityPoolMock>;
  }
  override getDeployTransaction(
    _weth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_weth, overrides || {});
  }
  override attach(address: string): TricryptoLiquidityPoolMock {
    return super.attach(address) as TricryptoLiquidityPoolMock;
  }
  override connect(signer: Signer): TricryptoLiquidityPoolMock__factory {
    return super.connect(signer) as TricryptoLiquidityPoolMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TricryptoLiquidityPoolMockInterface {
    return new utils.Interface(_abi) as TricryptoLiquidityPoolMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TricryptoLiquidityPoolMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TricryptoLiquidityPoolMock;
  }
}
