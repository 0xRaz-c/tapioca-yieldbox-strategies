/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BalancerVaultMock,
  BalancerVaultMockInterface,
} from "../../../contracts/balancer/BalancerVaultMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_stablePool",
        type: "address",
      },
      {
        internalType: "address",
        name: "_weth",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "recipient",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "assets",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "minAmountsOut",
            type: "uint256[]",
          },
          {
            internalType: "bytes",
            name: "userData",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "toInternalBalance",
            type: "bool",
          },
        ],
        internalType: "struct IBalancerVault.ExitPoolRequest",
        name: "request",
        type: "tuple",
      },
    ],
    name: "exitPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "getPool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "enum IBalancerVault.PoolSpecialization",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "getPoolTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "lastChangeBlock",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "assets",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "maxAmountsIn",
            type: "uint256[]",
          },
          {
            internalType: "bytes",
            name: "userData",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "fromInternalBalance",
            type: "bool",
          },
        ],
        internalType: "struct IBalancerVault.JoinPoolRequest",
        name: "request",
        type: "tuple",
      },
    ],
    name: "joinPool",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "stablePool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "weth",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610b44380380610b4483398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b610a86806100be6000396000f3fe6080604052600436106100595760003560e01c80633fc8cef3146100655780638bdb3913146100a257806395ef4fa5146100c4578063b95cac28146100e4578063f6c00927146100f7578063f94d46681461013157600080fd5b3661006057005b600080fd5b34801561007157600080fd5b50600154610085906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100ae57600080fd5b506100c26100bd36600461088e565b610160565b005b3480156100d057600080fd5b50600054610085906001600160a01b031681565b6100c26100f236600461088e565b6101fb565b34801561010357600080fd5b506101236101123660046108fa565b50600080546001600160a01b031691565b604051610099929190610913565b34801561013d57600080fd5b5061015161014c3660046108fa565b610316565b6040516100999392919061094e565b61019b8330836020015160018151811061017c5761017c6109db565b60209081029190910101516000546001600160a01b03169291906103a2565b6101f58282602001516001815181106101b6576101b66109db565b602002602001015183600001516001815181106101d5576101d56109db565b60200260200101516001600160a01b03166104cb9092919063ffffffff16565b50505050565b61025783308360200151600181518110610217576102176109db565b60200260200101518460000151600181518110610236576102366109db565b60200260200101516001600160a01b03166103a2909392919063ffffffff16565b600054602082015180516001600160a01b0390921691637c928fe991906001908110610285576102856109db565b60200260200101516040518263ffffffff1660e01b81526004016102ab91815260200190565b600060405180830381600087803b1580156102c557600080fd5b505af11580156102d9573d6000803e3d6000fd5b505050506101f58282602001516001815181106102f8576102f86109db565b60209081029190910101516000546001600160a01b031691906104cb565b6040805160028082526060828101909352829160009181602001602082028036833750506001805483519396506001600160a01b031692869250811061035e5761035e6109db565b6001600160a01b0392909216602092830291909101820152604080516002808252606082018352909290919083019080368337019050509150600090509193909250565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161040691906109f1565b6000604051808303816000865af19150503d8060008114610443576040519150601f19603f3d011682016040523d82523d6000602084013e610448565b606091505b50915091508180156104725750805115806104725750808060200190518101906104729190610a2c565b6104c35760405162461bcd60e51b815260206004820181905260248201527f426f72696e6745524332303a205472616e7366657246726f6d206661696c656460448201526064015b60405180910390fd5b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161052791906109f1565b6000604051808303816000865af19150503d8060008114610564576040519150601f19603f3d011682016040523d82523d6000602084013e610569565b606091505b50915091508180156105935750805115806105935750808060200190518101906105939190610a2c565b6105df5760405162461bcd60e51b815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c65640000000060448201526064016104ba565b5050505050565b6001600160a01b03811681146105fb57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715610637576106376105fe565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610666576106666105fe565b604052919050565b600067ffffffffffffffff821115610688576106886105fe565b5060051b60200190565b600082601f8301126106a357600080fd5b813560206106b86106b38361066e565b61063d565b82815260059290921b840181019181810190868411156106d757600080fd5b8286015b848110156106f257803583529183019183016106db565b509695505050505050565b600082601f83011261070e57600080fd5b813567ffffffffffffffff811115610728576107286105fe565b61073b601f8201601f191660200161063d565b81815284602083860101111561075057600080fd5b816020850160208301376000918101602001919091529392505050565b80151581146105fb57600080fd5b80356107868161076d565b919050565b60006080828403121561079d57600080fd5b6107a5610614565b9050813567ffffffffffffffff808211156107bf57600080fd5b818401915084601f8301126107d357600080fd5b813560206107e36106b38361066e565b82815260059290921b8401810191818101908884111561080257600080fd5b948201945b8386101561082957853561081a816105e6565b82529482019490820190610807565b8652508581013593508284111561083f57600080fd5b61084b87858801610692565b9085015250604084013591508082111561086457600080fd5b50610871848285016106fd565b6040830152506108836060830161077b565b606082015292915050565b600080600080608085870312156108a457600080fd5b8435935060208501356108b6816105e6565b925060408501356108c6816105e6565b9150606085013567ffffffffffffffff8111156108e257600080fd5b6108ee8782880161078b565b91505092959194509250565b60006020828403121561090c57600080fd5b5035919050565b6001600160a01b0383168152604081016003831061094157634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b606080825284519082018190526000906020906080840190828801845b828110156109905781516001600160a01b03168452928401929084019060010161096b565b5050508381038285015285518082528683019183019060005b818110156109c5578351835292840192918401916001016109a9565b5050809350505050826040830152949350505050565b634e487b7160e01b600052603260045260246000fd5b6000825160005b81811015610a1257602081860181015185830152016109f8565b81811115610a21576000828501525b509190910192915050565b600060208284031215610a3e57600080fd5b8151610a498161076d565b939250505056fea26469706673582212205b1aae063856673722bbd9afca3db3e1e7a17c7d84074671f9de3c20b6ec719a64736f6c634300080f0033";

type BalancerVaultMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BalancerVaultMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BalancerVaultMock__factory extends ContractFactory {
  constructor(...args: BalancerVaultMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _stablePool: PromiseOrValue<string>,
    _weth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BalancerVaultMock> {
    return super.deploy(
      _stablePool,
      _weth,
      overrides || {}
    ) as Promise<BalancerVaultMock>;
  }
  override getDeployTransaction(
    _stablePool: PromiseOrValue<string>,
    _weth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_stablePool, _weth, overrides || {});
  }
  override attach(address: string): BalancerVaultMock {
    return super.attach(address) as BalancerVaultMock;
  }
  override connect(signer: Signer): BalancerVaultMock__factory {
    return super.connect(signer) as BalancerVaultMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BalancerVaultMockInterface {
    return new utils.Interface(_abi) as BalancerVaultMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BalancerVaultMock {
    return new Contract(address, _abi, signerOrProvider) as BalancerVaultMock;
  }
}
