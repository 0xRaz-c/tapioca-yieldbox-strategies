/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BalancerGaugeMock,
  BalancerGaugeMockInterface,
} from "../../../contracts/balancer/BalancerGaugeMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_lpToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_reward1",
        type: "address",
      },
      {
        internalType: "address",
        name: "_reward2",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "claim_rewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "claimable_reward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lp_token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "reward1",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "reward2",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "reward_tokens",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161086d38038061086d83398101604081905261002f9161008d565b600080546001600160a01b039485166001600160a01b0319918216179091556001805493851693821693909317909255600280549190931691161790556100d0565b80516001600160a01b038116811461008857600080fd5b919050565b6000806000606084860312156100a257600080fd5b6100ab84610071565b92506100b960208501610071565b91506100c760408501610071565b90509250925092565b61078e806100df6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806382c630661161006657806382c630661461011157806383df674714610124578063889069cd146101375780639faceb1b1461014a578063facf85b11461015d57600080fd5b806333fd6f741461009857806338d07436146100be57806354c49fe9146100d357806370a08231146100fe575b600080fd5b6100ab6100a63660046105f8565b610170565b6040519081526020015b60405180910390f35b6100d16100cc36600461063c565b6101a3565b005b6100e66100e136600461066c565b6101c7565b6040516001600160a01b0390911681526020016100b5565b6100ab61010c366004610685565b6101f3565b6000546100e6906001600160a01b031681565b6100d16101323660046106a7565b610260565b6001546100e6906001600160a01b031681565b6100ab6101583660046105f8565b61027d565b6002546100e6906001600160a01b031681565b60008061017c306101f3565b90508060000361019057600091505061019d565b678ac7230489e800009150505b92915050565b6101c3336101b0306101f3565b6000546001600160a01b03169190610398565b5050565b6000816000036101e25750506001546001600160a01b031690565b50506002546001600160a01b031690565b600080546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561023c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019d91906106e7565b600054610278906001600160a01b03163330866104b8565b505050565b600154604051637c928fe960e01b8152678ac7230489e8000060048201526000916001600160a01b031690637c928fe990602401600060405180830381600087803b1580156102cb57600080fd5b505af11580156102df573d6000803e3d6000fd5b5050600254604051637c928fe960e01b8152678ac7230489e8000060048201526001600160a01b039091169250637c928fe99150602401600060405180830381600087803b15801561033057600080fd5b505af1158015610344573d6000803e3d6000fd5b505060015461036892506001600160a01b0316905033678ac7230489e80000610398565b600254610387906001600160a01b031633678ac7230489e80000610398565b506801158e460913d0000092915050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916103f49190610700565b6000604051808303816000865af19150503d8060008114610431576040519150601f19603f3d011682016040523d82523d6000602084013e610436565b606091505b5091509150818015610460575080511580610460575080806020019051810190610460919061073b565b6104b15760405162461bcd60e51b815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c65640000000060448201526064015b60405180910390fd5b5050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161051c9190610700565b6000604051808303816000865af19150503d8060008114610559576040519150601f19603f3d011682016040523d82523d6000602084013e61055e565b606091505b5091509150818015610588575080511580610588575080806020019051810190610588919061073b565b6105d45760405162461bcd60e51b815260206004820181905260248201527f426f72696e6745524332303a205472616e7366657246726f6d206661696c656460448201526064016104a8565b505050505050565b80356001600160a01b03811681146105f357600080fd5b919050565b6000806040838503121561060b57600080fd5b610614836105dc565b9150610622602084016105dc565b90509250929050565b801515811461063957600080fd5b50565b6000806040838503121561064f57600080fd5b8235915060208301356106618161062b565b809150509250929050565b60006020828403121561067e57600080fd5b5035919050565b60006020828403121561069757600080fd5b6106a0826105dc565b9392505050565b6000806000606084860312156106bc57600080fd5b833592506106cc602085016105dc565b915060408401356106dc8161062b565b809150509250925092565b6000602082840312156106f957600080fd5b5051919050565b6000825160005b818110156107215760208186018101518583015201610707565b81811115610730576000828501525b509190910192915050565b60006020828403121561074d57600080fd5b81516106a08161062b56fea2646970667358221220960a76882c0db92e462b9baeb714b64155d768f13c2efe9f1018ea50aed48ff764736f6c634300080f0033";

type BalancerGaugeMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BalancerGaugeMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BalancerGaugeMock__factory extends ContractFactory {
  constructor(...args: BalancerGaugeMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _lpToken: PromiseOrValue<string>,
    _reward1: PromiseOrValue<string>,
    _reward2: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BalancerGaugeMock> {
    return super.deploy(
      _lpToken,
      _reward1,
      _reward2,
      overrides || {}
    ) as Promise<BalancerGaugeMock>;
  }
  override getDeployTransaction(
    _lpToken: PromiseOrValue<string>,
    _reward1: PromiseOrValue<string>,
    _reward2: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _lpToken,
      _reward1,
      _reward2,
      overrides || {}
    );
  }
  override attach(address: string): BalancerGaugeMock {
    return super.attach(address) as BalancerGaugeMock;
  }
  override connect(signer: Signer): BalancerGaugeMock__factory {
    return super.connect(signer) as BalancerGaugeMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BalancerGaugeMockInterface {
    return new utils.Interface(_abi) as BalancerGaugeMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BalancerGaugeMock {
    return new Contract(address, _abi, signerOrProvider) as BalancerGaugeMock;
  }
}
