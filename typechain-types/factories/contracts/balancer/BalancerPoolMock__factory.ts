/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BalancerPoolMock,
  BalancerPoolMockInterface,
} from "../../../contracts/balancer/BalancerPoolMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_val",
        type: "uint256",
      },
    ],
    name: "freeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c0346101a6574660a05260208101907f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692188252466040820152306060820152606081526080810181811060018060401b038211176101905760405251902060805261006b6004546101ab565b601f8111610143575b507f5465737420546f6b656e000000000000000000000000000000000000000000146004556005546100a5906101ab565b601f81116100f7575b600461151560f21b016005556006805460ff191660121790556a52b7d2dcc80cd2e4000000600355604051610cae90816101e6823960805181610bc5015260a05181610b9e0152f35b6005600081815291601f01901c7f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0908101905b8181106101385750506100ae565b82815560010161012a565b6004600090815290601f0160051c7f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b908101905b818110610185575050610074565b828155600101610177565b634e487b7160e01b600052604160045260246000fd5b600080fd5b90600182811c921680156101db575b60208310146101c557565b634e487b7160e01b600052602260045260246000fd5b91607f16916101ba56fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde031461093557508163095ea7b3146108c457816318160ddd146108a557816323b872dd14610703578163313ce567146106e15781633644e515146106bd578163679aefce1461069a57816370a08231146106635781637c928fe9146105ce5781637ecebe001461059657816395d89b4114610493578163a9059cbb146103ba578163d505accf1461010a575063dd62ed3e146100bf57600080fd5b34610106578060031936011261010657806020926100db610aae565b6100e3610ac9565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b9050346103b65760e03660031901126103b657610125610aae565b9061012e610ac9565b9260443590606435926084359460ff86168096036103b2576001600160a01b0390811695861561036f578542101561033b5786895260209560028752848a20988954996000198b146103285760018b01905585519184898401927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c984528b89860152169a8b606085015288608085015260a084015260c083015260c0825260e082019167ffffffffffffffff9181841083851117610315578388528151902091610120820190811184821017610315579260809261025760608f968d9895610100918d5260028652019361190160f01b8552610228610b99565b8c5194859261023f8c850198899251928391610a5f565b8301918b8301528d820152038b810184520182610a27565b5190209087519182528482015260a4358782015260c435606082015282805260015afa1561030b578590885116036102ca5750907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259291848752600183528087208688528352818188205551908152a380f35b83606492519162461bcd60e51b8352820152601860248201527f45524332303a20496e76616c6964205369676e617475726500000000000000006044820152fd5b82513d89823e3d90fd5b634e487b7160e01b8d526041875260248dfd5b634e487b7160e01b8c526011865260248cfd5b835162461bcd60e51b8152602081850152600e60248201526d115490cc8c0e88115e1c1a5c995960921b6044820152606490fd5b835162461bcd60e51b8152602081850152601860248201527f45524332303a204f776e65722063616e6e6f74206265203000000000000000006044820152606490fd5b8780fd5b8280fd5b5050346101065780600319360112610106576020916103d7610aae565b82602435928315801590610481575b610416575b50519182526001600160a01b0316903390600080516020610c59833981519152908590a35160018152f35b3381528086528181205461042c85821015610adf565b6001600160a01b038416908533839003610449575b5050506103eb565b61045d91610458841515610b24565b610b69565b33835282885283832055815220610475838254610b8c565b90558238808085610441565b50336001600160a01b038416146103e6565b919050346103b657826003193601126103b657805191836005549060019082821c92828116801561058c575b6020958686108214610579575084885290811561055757506001146104fe575b6104fa86866104f0828b0383610a27565b5191829182610a82565b0390f35b929550600583527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b82841061054457505050826104fa946104f09282010194386104df565b8054868501880152928601928101610527565b60ff191687860152505050151560051b83010192506104f0826104fa386104df565b634e487b7160e01b845260229052602483fd5b93607f16936104bf565b5050346101065760203660031901126101065760209181906001600160a01b036105be610aae565b1681526002845220549051908152f35b919050346103b65760203660031901126103b6576003548235926105f28483610b8c565b918210610630575060035533835282602052808320610612838254610b8c565b90555190815281600080516020610c5983398151915260203393a380f35b606490602084519162461bcd60e51b8352820152600d60248201526c4d696e74206f766572666c6f7760981b6044820152fd5b5050346101065760203660031901126101065760209181906001600160a01b0361068b610aae565b16815280845220549051908152f35b50503461010657816003193601126101065760209051670de0b6b3a76400008152f35b5050346101065781600319360112610106576020906106da610b99565b9051908152f35b50503461010657816003193601126101065760209060ff600654169051908152f35b8284346108a25760603660031901126108a25761071e610aae565b90610727610ac9565b6044359182610763575b508351918252602094506001600160a01b03908116921690600080516020610c59833981519152908590a35160018152f35b6001600160a01b0384811680835260208381528784205491989290919061078c87831015610adf565b851692838a036107a0575b50505050610731565b8985526001835288852033865283528885205490600019820361080a575b50509282602099828a946107e98a8e99610458600080516020610c598339815191529c9a1515610b24565b92825252838320558152206107ff858254610b8c565b905591878080610797565b87821061085f575092602099858a946107e98a8e999661083a82600080516020610c598339815191529d9b610b69565b86865260018552898620338752855289862055965050509450955099819496506107be565b895162461bcd60e51b8152908101849052601860248201527f45524332303a20616c6c6f77616e636520746f6f206c6f7700000000000000006044820152606490fd5b80fd5b5050346101065781600319360112610106576020906003549051908152f35b505034610106578060031936011261010657602091816108e2610aae565b91602435918291338152600187528181209460018060a01b0316948582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8385346108a257806003193601126108a257809380549160019083821c92828516948515610a1d575b6020958686108114610a0a578589529081156109e6575060011461098e575b6104fa87876104f0828c0383610a27565b81529295507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106109d357505050826104fa946104f09282010194868061097d565b80548685018801529286019281016109b5565b60ff19168887015250505050151560051b83010192506104f0826104fa868061097d565b634e487b7160e01b845260228352602484fd5b93607f169361095e565b90601f8019910116810190811067ffffffffffffffff821117610a4957604052565b634e487b7160e01b600052604160045260246000fd5b60005b838110610a725750506000910152565b8181015183820152602001610a62565b60409160208252610aa28151809281602086015260208686019101610a5f565b601f01601f1916010190565b600435906001600160a01b0382168203610ac457565b600080fd5b602435906001600160a01b0382168203610ac457565b15610ae657565b60405162461bcd60e51b815260206004820152601660248201527545524332303a2062616c616e636520746f6f206c6f7760501b6044820152606490fd5b15610b2b57565b60405162461bcd60e51b815260206004820152601660248201527545524332303a206e6f207a65726f206164647265737360501b6044820152606490fd5b91908203918211610b7657565b634e487b7160e01b600052601160045260246000fd5b91908201809211610b7657565b6000467f000000000000000000000000000000000000000000000000000000000000000003610be757507f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101917f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218835246604083015230606083015260608252608082019082821067ffffffffffffffff831117610c44575060405251902090565b634e487b7160e01b81526041600452602490fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212201b26de3283e4fc4d6a69d8b059307a74d368652d79852516d37ccca05c9de6c664736f6c63430008120033";

type BalancerPoolMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BalancerPoolMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BalancerPoolMock__factory extends ContractFactory {
  constructor(...args: BalancerPoolMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BalancerPoolMock> {
    return super.deploy(overrides || {}) as Promise<BalancerPoolMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BalancerPoolMock {
    return super.attach(address) as BalancerPoolMock;
  }
  override connect(signer: Signer): BalancerPoolMock__factory {
    return super.connect(signer) as BalancerPoolMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BalancerPoolMockInterface {
    return new utils.Interface(_abi) as BalancerPoolMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BalancerPoolMock {
    return new Contract(address, _abi, signerOrProvider) as BalancerPoolMock;
  }
}
