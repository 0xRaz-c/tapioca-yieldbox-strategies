/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  StEthMock,
  StEthMockInterface,
} from "../../../contracts/lido/StEthMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_val",
        type: "uint256",
      },
    ],
    name: "freeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isStakingPaused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "submit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60c03461019a576001600160401b0390601f62000ef438819003918201601f1916830191848311848410176101845780849260209460405283398101031261019a5751904660a05260405160208101917f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218835246604083015230606083015260608252608082019082821090821117610184576040525190206080526100a660045461019f565b601f8111610156575b507f5465737420546f6b656e000000000000000000000000000000000000000000146004556005546100e09061019f565b601f8111610128575b50600461151560f21b016005556006805460ff19166012179055600355604051610d1a9081620001da823960805181610bac015260a05181610b850152f35b600060058152601f60208220920160051c8201915b82811061014b5750506100e9565b81815560010161013d565b600060048152601f60208220920160051c8201915b8281106101795750506100af565b81815560010161016b565b634e487b7160e01b600052604160045260246000fd5b600080fd5b90600182811c921680156101cf575b60208310146101b957565b634e487b7160e01b600052602260045260246000fd5b91607f16916101ae56fe6080604081815260049182361015610022575b505050361561002057600080fd5b005b600092833560e01c91826306fdde031461086257508163095ea7b3146107f157816318160ddd146107d25781631ea7ca89146107b757816323b872dd14610610578163313ce567146105ee5781633644e515146105ca57816370a08231146105935781637c928fe9146105735781637ecebe001461053b57816395d89b4114610438578163a1903eab14610404578163a9059cbb146103d2578163d505accf14610122575063dd62ed3e146100d75780610012565b3461011e578060031936011261011e57806020926100f36109db565b6100fb6109f6565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b9050346103ce5760e03660031901126103ce5761013d6109db565b906101466109f6565b9260443590606435926084359460ff86168096036103ca576001600160a01b0390811695861561038757854210156103535786895260209560028752848a20988954996000198b146103405760018b01905585519184898401927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c984528b89860152169a8b606085015288608085015260a084015260c083015260c0825260e082019167ffffffffffffffff918184108385111761032d57838852815190209161012082019081118482101761032d579260809261026f60608f968d9895610100918d5260028652019361190160f01b8552610240610b80565b8c519485926102578c85019889925192839161098c565b8301918b8301528d820152038b810184520182610954565b5190209087519182528482015260a4358782015260c435606082015282805260015afa15610323578590885116036102e25750907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259291848752600183528087208688528352818188205551908152a380f35b83606492519162461bcd60e51b8352820152601860248201527f45524332303a20496e76616c6964205369676e617475726500000000000000006044820152fd5b82513d89823e3d90fd5b634e487b7160e01b8d526041875260248dfd5b634e487b7160e01b8c526011865260248cfd5b835162461bcd60e51b8152602081850152600e60248201526d115490cc8c0e88115e1c1a5c995960921b6044820152606490fd5b835162461bcd60e51b8152602081850152601860248201527f45524332303a204f776e65722063616e6e6f74206265203000000000000000006044820152606490fd5b8780fd5b8280fd5b50503461011e578060031936011261011e576020906103fb6103f26109db565b60243590610ac6565b90519015158152f35b5050602036600319011261011e5760209061041d6109db565b5061042734610c3f565b6104313433610ac6565b5051348152f35b919050346103ce57826003193601126103ce57805191836005549060019082821c928281168015610531575b602095868610821461051e57508488529081156104fc57506001146104a3575b61049f8686610495828b0383610954565b51918291826109af565b0390f35b929550600583527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b8284106104e9575050508261049f94610495928201019438610484565b80548685018801529286019281016104cc565b60ff191687860152505050151560051b83010192506104958261049f38610484565b634e487b7160e01b845260229052602483fd5b93607f1693610464565b50503461011e57602036600319011261011e5760209181906001600160a01b036105636109db565b1681526002845220549051908152f35b83903461011e57602036600319011261011e576105909035610c3f565b80f35b50503461011e57602036600319011261011e5760209181906001600160a01b036105bb6109db565b16815280845220549051908152f35b50503461011e578160031936011261011e576020906105e7610b80565b9051908152f35b50503461011e578160031936011261011e5760209060ff600654169051908152f35b8284346107b45760603660031901126107b45761062b6109db565b906106346109f6565b6044359182610670575b508351918252602094506001600160a01b03908116921690600080516020610cc5833981519152908590a35160018152f35b6001600160a01b0384811680835260208381528784205491989290919061069987831015610a0c565b851692838a036106ad575b5050505061063e565b8985526001835288852033865283528885205490600019820361071c575b50509282602099828a946106fb8a8e996106f6600080516020610cc58339815191529c9a1515610a51565b610a96565b9282525283832055815220610711858254610ab9565b9055918780806106a4565b878210610771575092602099858a946106fb8a8e999661074c82600080516020610cc58339815191529d9b610a96565b86865260018552898620338752855289862055965050509450955099819496506106cb565b895162461bcd60e51b8152908101849052601860248201527f45524332303a20616c6c6f77616e636520746f6f206c6f7700000000000000006044820152606490fd5b80fd5b50503461011e578160031936011261011e5751908152602090f35b50503461011e578160031936011261011e576020906003549051908152f35b50503461011e578060031936011261011e576020918161080f6109db565b91602435918291338152600187528181209460018060a01b0316948582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8385346107b457806003193601126107b457809380549160019083821c9282851694851561094a575b60209586861081146109375785895290811561091357506001146108bb575b61049f8787610495828c0383610954565b81529295507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b828410610900575050508261049f94610495928201019486806108aa565b80548685018801529286019281016108e2565b60ff19168887015250505050151560051b83010192506104958261049f86806108aa565b634e487b7160e01b845260228352602484fd5b93607f169361088b565b90601f8019910116810190811067ffffffffffffffff82111761097657604052565b634e487b7160e01b600052604160045260246000fd5b60005b83811061099f5750506000910152565b818101518382015260200161098f565b604091602082526109cf815180928160208601526020868601910161098c565b601f01601f1916010190565b600435906001600160a01b03821682036109f157565b600080fd5b602435906001600160a01b03821682036109f157565b15610a1357565b60405162461bcd60e51b815260206004820152601660248201527545524332303a2062616c616e636520746f6f206c6f7760501b6044820152606490fd5b15610a5857565b60405162461bcd60e51b815260206004820152601660248201527545524332303a206e6f207a65726f206164647265737360501b6044820152606490fd5b91908203918211610aa357565b634e487b7160e01b600052601160045260246000fd5b91908201809211610aa357565b8115801590610b6e575b610b00575b6040519182526001600160a01b0316903390600080516020610cc583398151915290602090a3600190565b816000338152806020526040812054610b1b83821015610a0c565b6001600160a01b0384169033829003610b38575b50505050610ad5565b604093610b4a916106f6841515610a51565b3383528260205283832055815220610b63838254610ab9565b905581388080610b2f565b50336001600160a01b03821614610ad0565b6000467f000000000000000000000000000000000000000000000000000000000000000003610bce57507f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101917f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218835246604083015230606083015260608252608082019082821067ffffffffffffffff831117610c2b575060405251902090565b634e487b7160e01b81526041600452602490fd5b600354610c4c8282610ab9565b908110610c8f576003553360005260006020526040600020610c6f828254610ab9565b90556040519081526000600080516020610cc583398151915260203393a3565b60405162461bcd60e51b815260206004820152600d60248201526c4d696e74206f766572666c6f7760981b6044820152606490fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220826f4683a8ffdbfc099ad6c8c9ac97c99528f8c1e48787fea45448cc8d3ec08f64736f6c63430008120033";

type StEthMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StEthMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StEthMock__factory extends ContractFactory {
  constructor(...args: StEthMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StEthMock> {
    return super.deploy(initialSupply, overrides || {}) as Promise<StEthMock>;
  }
  override getDeployTransaction(
    initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(initialSupply, overrides || {});
  }
  override attach(address: string): StEthMock {
    return super.attach(address) as StEthMock;
  }
  override connect(signer: Signer): StEthMock__factory {
    return super.connect(signer) as StEthMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StEthMockInterface {
    return new utils.Interface(_abi) as StEthMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StEthMock {
    return new Contract(address, _abi, signerOrProvider) as StEthMock;
  }
}
