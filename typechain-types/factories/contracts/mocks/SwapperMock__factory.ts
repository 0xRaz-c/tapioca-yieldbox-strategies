/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SwapperMock,
  SwapperMockInterface,
} from "../../../contracts/mocks/SwapperMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    name: "getAmountsOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "swapExactTokensForTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080806040523461001657610522908161001c8239f35b600080fdfe60806040908082526004918236101561001757600080fd5b600091823560e01c90816338ed1739146100b5575063d06ca61f1461003b57600080fd5b346100b157806003193601126100b1578235916024359067ffffffffffffffff82116100ae57506100aa936100729136910161039f565b505080519161008083610410565b60028352813660208501378061009584610442565b5261009f83610465565b5251918291826103d5565b0390f35b80fd5b5080fd5b929390503461039b5760a036600319011261039b5780359360449067ffffffffffffffff8235818111610397576100ef903690860161039f565b6001600160a01b03606435818116939192908490036102ec578015610384579082918b9695949361011f83610475565b1660209b8c8101906323b872dd60e01b8252602499338b830152308c83015260648201526064815260a0810181811089821117610372578d5251889283929083905af161016a610489565b81610342575b501561030257600110156102f05789018161018a82610475565b16803b156102ec57858c888b838e519586948593637c928fe960e01b85528401525af180156102e2576102bb575b506101c290610475565b16918751908982019263a9059cbb60e01b8452868301528a878301528682526080820190828210908211176102a7578493929184918a5251925af1610205610489565b81610277575b5015610238575050506100aa928180519361022585610410565b6002855236908501378061009584610442565b601c906064957f426f72696e6745524332303a205472616e73666572206661696c6564000000009495519562461bcd60e51b8752860152840152820152fd5b8051801592508790831561028f575b5050503861020b565b61029f93508201810191016104d4565b388681610286565b85604189634e487b7160e01b600052526000fd5b8481969296116102d0578952936101c26101b8565b634e487b7160e01b8252604189528682fd5b8a513d88823e3d90fd5b8580fd5b634e487b7160e01b8552603288528585fd5b506064887f426f72696e6745524332303a205472616e7366657246726f6d206661696c6564898d8a818f519562461bcd60e51b8752860152840152820152fd5b8051801592508d90831561035a575b50505038610170565b61036a93508201810191016104d4565b388c81610351565b634e487b7160e01b8a5260418d528a8afd5b634e487b7160e01b865260328852602486fd5b8280fd5b8380fd5b9181601f840112156103d05782359167ffffffffffffffff83116103d0576020808501948460051b0101116103d057565b600080fd5b6020908160408183019282815285518094520193019160005b8281106103fc575050505090565b8351855293810193928101926001016103ee565b6060810190811067ffffffffffffffff82111761042c57604052565b634e487b7160e01b600052604160045260246000fd5b80511561044f5760200190565b634e487b7160e01b600052603260045260246000fd5b80516001101561044f5760400190565b356001600160a01b03811681036103d05790565b3d156104cf5767ffffffffffffffff903d82811161042c5760405192601f8201601f19908116603f011684019081118482101761042c5760405282523d6000602084013e565b606090565b908160209103126103d0575180151581036103d0579056fea2646970667358221220da2c6d58a837c897e671bdd562f4c172b0d0de0468264cf646a404aa941512fe64736f6c63430008120033";

type SwapperMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapperMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapperMock__factory extends ContractFactory {
  constructor(...args: SwapperMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SwapperMock> {
    return super.deploy(overrides || {}) as Promise<SwapperMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SwapperMock {
    return super.attach(address) as SwapperMock;
  }
  override connect(signer: Signer): SwapperMock__factory {
    return super.connect(signer) as SwapperMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapperMockInterface {
    return new utils.Interface(_abi) as SwapperMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapperMock {
    return new Contract(address, _abi, signerOrProvider) as SwapperMock;
  }
}
