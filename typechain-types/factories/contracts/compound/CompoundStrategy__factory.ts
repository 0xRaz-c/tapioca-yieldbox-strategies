/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  CompoundStrategy,
  CompoundStrategyInterface,
} from "../../../contracts/compound/CompoundStrategy";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IYieldBox",
        name: "_yieldBox",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_cToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "AmountDeposited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "AmountQueued",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "AmountWithdrawn",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_old",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_new",
        type: "uint256",
      },
    ],
    name: "DepositThreshold",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "cToken",
    outputs: [
      {
        internalType: "contract ICToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cheapWithdrawable",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "compound",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "compoundAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "contractAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "depositThreshold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposited",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "description_",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "emergencyWithdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "setDepositThreshold",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenType",
    outputs: [
      {
        internalType: "enum TokenType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
      {
        internalType: "bool",
        name: "direct",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "renounce",
        type: "bool",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawable",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wrappedNative",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "yieldBox",
    outputs: [
      {
        internalType: "contract IYieldBox",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6101006040523480156200001257600080fd5b506040516200192538038062001925833981016040819052620000359162000143565b6001600160a01b03808416608052821660a052600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a360016002556001600160a01b0382811660c081905290821660e081905260405163095ea7b360e01b81526004810191909152600019602482015263095ea7b390604401602060405180830381600087803b158015620000e557600080fd5b505af1158015620000fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000120919062000197565b50505050620001c2565b6001600160a01b03811681146200014057600080fd5b50565b6000806000606084860312156200015957600080fd5b835162000166816200012a565b602085015190935062000179816200012a565b60408501519092506200018c816200012a565b809150509250925092565b600060208284031215620001aa57600080fd5b81518015158114620001bb57600080fd5b9392505050565b60805160a05160c05160e0516116b2620002736000396000818161027d01528181610744015281816107df01528181610976015281816109f601528181610c8201528181610e890152610f5c01526000818161039d0152818161086601528181610ac901528181610b7801528181610c1c01528181610df901528181610fe30152818161106f015261114c015260006103f10152600081816103490152818161068d01526108ea01526116b26000f3fe6080604052600436106101395760003560e01c8063734daaa1116100ab578063de4065771161006f578063de40657714610337578063e30c39781461036b578063e3575f0514610256578063eb6d3a111461038b578063f3fef3a3146103bf578063f6b4dfb4146103df57600080fd5b8063734daaa1146102cc5780638da5cb5b146102e2578063afa91cc614610302578063ce845d1d14610256578063db2e21bc1461032257600080fd5b806348dcb051116100fd57806348dcb0511461020d5780634cce992d146102215780634e71e0c814610241578063501883011461025657806369e527da1461026b5780637284e416146102b757600080fd5b806306fdde0314610145578063078dfbe71461018857806317d70f7c146101aa57806322a58c5d146101cd57806330fa738c146101eb57600080fd5b3661014057005b600080fd5b34801561015157600080fd5b5060408051808201909152600881526710dbdb5c1bdd5b9960c21b60208201525b60405161017f9190611365565b60405180910390f35b34801561019457600080fd5b506101a86101a33660046113c2565b610413565b005b3480156101b657600080fd5b506101bf600081565b60405190815260200161017f565b3480156101d957600080fd5b506101a86101e8366004611421565b50565b3480156101f757600080fd5b50610200600181565b60405161017f91906114d2565b34801561021957600080fd5b5060006101bf565b34801561022d57600080fd5b506101a861023c3660046114fa565b61052b565b34801561024d57600080fd5b506101a8610596565b34801561026257600080fd5b506101bf610653565b34801561027757600080fd5b5061029f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161017f565b3480156102c357600080fd5b50610172610662565b3480156102d857600080fd5b506101bf60035481565b3480156102ee57600080fd5b5060005461029f906001600160a01b031681565b34801561030e57600080fd5b506101a861031d3660046114fa565b610682565b34801561032e57600080fd5b506101bf6106f2565b34801561034357600080fd5b5061029f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561037757600080fd5b5060015461029f906001600160a01b031681565b34801561039757600080fd5b5061029f7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103cb57600080fd5b506101a86103da366004611513565b6108df565b3480156103eb57600080fd5b5061029f7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031633146104465760405162461bcd60e51b815260040161043d9061153d565b60405180910390fd5b8115610509576001600160a01b0383161515806104605750805b6104a45760405162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b604482015260640161043d565b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0385166001600160a01b031991821617909155600180549091169055505050565b600180546001600160a01b0385166001600160a01b0319909116179055505050565b6000546001600160a01b031633146105555760405162461bcd60e51b815260040161043d9061153d565b60035460408051918252602082018390527f3b779194d2cc7daf4de546bec10f6f325d421b2e202c11aa24e86e39845860cc910160405180910390a1600355565b6001546001600160a01b03163381146105f15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604482015260640161043d565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b600061065d610954565b905090565b60606040518060600160405280602b8152602001611652602b9139905090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106e95760405162461bcd60e51b815260206004820152600c60248201526b09cdee840b2d2cad8c884def60a31b604482015260640161043d565b6101e881610b58565b600080546001600160a01b0316331461071d5760405162461bcd60e51b815260040161043d9061153d565b6040805160208101909152600090526040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561078e57600080fd5b505afa1580156107a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c69190611572565b60405163db006a7560e01b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063db006a7590602401602060405180830381600087803b15801561082b57600080fd5b505af115801561083f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108639190611572565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b1580156108bf57600080fd5b505af11580156108d3573d6000803e3d6000fd5b50505050504791505090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109465760405162461bcd60e51b815260206004820152600c60248201526b09cdee840b2d2cad8c884def60a31b604482015260640161043d565b6109508282610d72565b5050565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156109b857600080fd5b505afa1580156109cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f09190611572565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4d57600080fd5b505afa158015610a61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a859190611572565b90506000670de0b6b3a7640000610a9c83856115a1565b610aa691906115c0565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015610b0b57600080fd5b505afa158015610b1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b439190611572565b9050610b4f82826115e2565b94505050505090565b610b606111c2565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610bc257600080fd5b505afa158015610bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfa9190611572565b9050600354811115610d3357604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015610c6857600080fd5b505af1158015610c7c573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631249c58b826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610cdb57600080fd5b505af1158015610cef573d6000803e3d6000fd5b50505050507fde22222b0ac0d69f2a19cd7b1443a29a5f37346640fff3506bdd6a9a9497f9d381604051610d2591815260200190565b60405180910390a150610d68565b6040518281527f9447d5abbf0af693ca2937bf8b1ec6a8c9dc4fbac672911c633fb31c78e5e3ca9060200160405180910390a1505b6101e86001600255565b610d7a6111c2565b6000610d84610954565b905081811015610de15760405162461bcd60e51b815260206004820152602260248201527f436f6d706f756e6453747261746567793a20616d6f756e74206e6f742076616c6044820152611a5960f21b606482015260840161043d565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610e4357600080fd5b505afa158015610e57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7b9190611572565b9050808311156110585760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015610ee057600080fd5b505afa158015610ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f189190611572565b9050600081610f2784876115fa565b610f3990670de0b6b3a76400006115a1565b610f4391906115c0565b60405163db006a7560e01b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063db006a7590602401602060405180830381600087803b158015610fa857600080fd5b505af1158015610fbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe09190611572565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561103c57600080fd5b505af1158015611050573d6000803e3d6000fd5b505050505050505b6040516370a0823160e01b815230600482015283907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156110b957600080fd5b505afa1580156110cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f19190611572565b101561113f5760405162461bcd60e51b815260206004820152601c60248201527f436f6d706f756e6453747261746567793a206e6f7420656e6f75676800000000604482015260640161043d565b6111736001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016858561121a565b836001600160a01b03167f058b581e2433b8b02263f5b0e5c2889fcb7b3495112884a3147619038fba46d8846040516111ae91815260200190565b60405180910390a250506109506001600255565b6002805414156112145760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161043d565b60028055565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916112769190611611565b6000604051808303816000865af19150503d80600081146112b3576040519150601f19603f3d011682016040523d82523d6000602084013e6112b8565b606091505b50915091508180156112e25750805115806112e25750808060200190518101906112e2919061162d565b61132e5760405162461bcd60e51b815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604482015260640161043d565b5050505050565b60005b83811015611350578181015183820152602001611338565b8381111561135f576000848401525b50505050565b6020815260008251806020840152611384816040850160208701611335565b601f01601f19169190910160400192915050565b80356001600160a01b03811681146113af57600080fd5b919050565b80151581146101e857600080fd5b6000806000606084860312156113d757600080fd5b6113e084611398565b925060208401356113f0816113b4565b91506040840135611400816113b4565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561143357600080fd5b813567ffffffffffffffff8082111561144b57600080fd5b818401915084601f83011261145f57600080fd5b8135818111156114715761147161140b565b604051601f8201601f19908116603f011681019083821181831017156114995761149961140b565b816040528281528760208487010111156114b257600080fd5b826020860160208301376000928101602001929092525095945050505050565b60208101600583106114f457634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561150c57600080fd5b5035919050565b6000806040838503121561152657600080fd5b61152f83611398565b946020939093013593505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561158457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156115bb576115bb61158b565b500290565b6000826115dd57634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156115f5576115f561158b565b500190565b60008282101561160c5761160c61158b565b500390565b60008251611623818460208701611335565b9190910192915050565b60006020828403121561163f57600080fd5b815161164a816113b4565b939250505056fe436f6d706f756e6420737472617465677920666f722077726170706564206e617469766520617373657473a2646970667358221220cc6efb1e8d3e88a31659e593efc7d83d62743e7078217b02fd3492cfb145e87864736f6c63430008090033";

type CompoundStrategyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CompoundStrategyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CompoundStrategy__factory extends ContractFactory {
  constructor(...args: CompoundStrategyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _yieldBox: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _cToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CompoundStrategy> {
    return super.deploy(
      _yieldBox,
      _token,
      _cToken,
      overrides || {}
    ) as Promise<CompoundStrategy>;
  }
  override getDeployTransaction(
    _yieldBox: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _cToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _yieldBox,
      _token,
      _cToken,
      overrides || {}
    );
  }
  override attach(address: string): CompoundStrategy {
    return super.attach(address) as CompoundStrategy;
  }
  override connect(signer: Signer): CompoundStrategy__factory {
    return super.connect(signer) as CompoundStrategy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CompoundStrategyInterface {
    return new utils.Interface(_abi) as CompoundStrategyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CompoundStrategy {
    return new Contract(address, _abi, signerOrProvider) as CompoundStrategy;
  }
}
