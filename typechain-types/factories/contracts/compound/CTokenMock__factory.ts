/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  CTokenMock,
  CTokenMockInterface,
} from "../../../contracts/compound/CTokenMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_underlying",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "exchangeRateStored",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_val",
        type: "uint256",
      },
    ],
    name: "freeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "mint",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "redeemTokens",
        type: "uint256",
      },
    ],
    name: "redeem",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "underlying",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60c034620001db576001600160401b0390601f6200105f38819003918201601f191683019184831184841017620001c557808492602094604052833981010312620001db5751906001600160a01b0382168203620001db574660a05260405160208101917f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218835246604083015230606083015260608252608082019082821090821117620001c557604052519020608052620000bd600454620001e0565b601f811162000194575b507f5465737420546f6b656e00000000000000000000000000000000000000000014600455600554620000fa90620001e0565b601f811162000163575b600461151560f21b016005556006805469152d02c7e14af68000006003556001600160a81b031916600884901b610100600160a81b0316176012179055604051610e4190816200021e823960805181610cd3015260a05181610cac0152f35b600060058152601f60208220920160051c8201915b8281106200018857505062000104565b81815560010162000178565b600060048152601f60208220920160051c8201915b828110620001b9575050620000c7565b818155600101620001a9565b634e487b7160e01b600052604160045260246000fd5b600080fd5b90600182811c9216801562000212575b6020831014620001fc57565b634e487b7160e01b600052602260045260246000fd5b91607f1691620001f056fe6080604081815260049182361015610022575b505050361561002057600080fd5b005b600092833560e01c91826306fdde031461098957508163095ea7b3146109185781631249c58b146108d657816318160ddd146108b7578163182df0f51461089457816323b872dd146106f0578163313ce567146106ce5781633644e515146106aa5781636f307dc31461067d57816370a08231146106465781637c928fe9146106265781637ecebe00146105ee57816395d89b41146104eb578163a9059cbb146104b9578163d505accf1461020d578163db006a7514610138575063dd62ed3e146100ed5780610012565b3461013457806003193601126101345780602092610109610b02565b610111610b1d565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b9190503461020957602092836003193601126102065782359281808580156101fc575b8280929181923390f1156101f0573382528185528383832054106101bd575061018683600354610bbd565b60035533815280845281812061019d848254610bbd565b90558151838152600080516020610dec833981519152853392a351908152f35b825162461bcd60e51b8152908101859052600d60248201526c084eae4dc40e8dede40daeac6d609b1b6044820152606490fd5b509051903d90823e3d90fd5b6108fc915061015b565b80fd5b8280fd5b9050346102095760e036600319011261020957610228610b02565b90610231610b1d565b9260443590606435926084359460ff86168096036104b5576001600160a01b03908116958615610472578542101561043e5786895260209560028752848a20988954996000198b1461042b5760018b01905585519184898401927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c984528b89860152169a8b606085015288608085015260a084015260c083015260c0825260e082019167ffffffffffffffff9181841083851117610418578388528151902091610120820190811184821017610418579260809261035a60608f968d9895610100918d5260028652019361190160f01b855261032b610ca7565b8c519485926103428c850198899251928391610ab3565b8301918b8301528d820152038b810184520182610a7b565b5190209087519182528482015260a4358782015260c435606082015282805260015afa1561040e578590885116036103cd5750907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259291848752600183528087208688528352818188205551908152a380f35b83606492519162461bcd60e51b8352820152601860248201527f45524332303a20496e76616c6964205369676e617475726500000000000000006044820152fd5b82513d89823e3d90fd5b634e487b7160e01b8d526041875260248dfd5b634e487b7160e01b8c526011865260248cfd5b835162461bcd60e51b8152602081850152600e60248201526d115490cc8c0e88115e1c1a5c995960921b6044820152606490fd5b835162461bcd60e51b8152602081850152601860248201527f45524332303a204f776e65722063616e6e6f74206265203000000000000000006044820152606490fd5b8780fd5b5050346101345780600319360112610134576020906104e26104d9610b02565b60243590610bed565b90519015158152f35b91905034610209578260031936011261020957805191836005549060019082821c9282811680156105e4575b60209586861082146105d157508488529081156105af5750600114610556575b6105528686610548828b0383610a7b565b5191829182610ad6565b0390f35b929550600583527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b82841061059c575050508261055294610548928201019438610537565b805486850188015292860192810161057f565b60ff191687860152505050151560051b83010192506105488261055238610537565b634e487b7160e01b845260229052602483fd5b93607f1693610517565b5050346101345760203660031901126101345760209181906001600160a01b03610616610b02565b1681526002845220549051908152f35b839034610134576020366003190112610134576106439035610d66565b80f35b5050346101345760203660031901126101345760209181906001600160a01b0361066e610b02565b16815280845220549051908152f35b505034610134578160031936011261013457600654905160089190911c6001600160a01b03168152602090f35b5050346101345781600319360112610134576020906106c7610ca7565b9051908152f35b50503461013457816003193601126101345760209060ff600654169051908152f35b8284346102065760603660031901126102065761070b610b02565b90610714610b1d565b6044359182610750575b508351918252602094506001600160a01b03908116921690600080516020610dec833981519152908590a35160018152f35b6001600160a01b0384811680835260208381528784205491989290919061077987831015610b33565b851692838a0361078d575b5050505061071e565b898552600183528885203386528352888520549060001982036107fc575b50509282602099828a946107db8a8e996107d6600080516020610dec8339815191529c9a1515610b78565b610bbd565b92825252838320558152206107f1858254610be0565b905591878080610784565b878210610851575092602099858a946107db8a8e999661082c82600080516020610dec8339815191529d9b610bbd565b86865260018552898620338752855289862055965050509450955099819496506107ab565b895162461bcd60e51b8152908101849052601860248201527f45524332303a20616c6c6f77616e636520746f6f206c6f7700000000000000006044820152606490fd5b50503461013457816003193601126101345760209051670de0b6b3a76400008152f35b5050346101345781600319360112610134576020906003549051908152f35b838060031936011261020657606319340134811161090557806108fb61090192610d66565b33610bed565b5080f35b506011602492634e487b7160e01b835252fd5b50503461013457806003193601126101345760209181610936610b02565b91602435918291338152600187528181209460018060a01b0316948582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b838534610206578060031936011261020657809380549160019083821c92828516948515610a71575b6020958686108114610a5e57858952908115610a3a57506001146109e2575b6105528787610548828c0383610a7b565b81529295507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b828410610a27575050508261055294610548928201019486806109d1565b8054868501880152928601928101610a09565b60ff19168887015250505050151560051b83010192506105488261055286806109d1565b634e487b7160e01b845260228352602484fd5b93607f16936109b2565b90601f8019910116810190811067ffffffffffffffff821117610a9d57604052565b634e487b7160e01b600052604160045260246000fd5b60005b838110610ac65750506000910152565b8181015183820152602001610ab6565b60409160208252610af68151809281602086015260208686019101610ab3565b601f01601f1916010190565b600435906001600160a01b0382168203610b1857565b600080fd5b602435906001600160a01b0382168203610b1857565b15610b3a57565b60405162461bcd60e51b815260206004820152601660248201527545524332303a2062616c616e636520746f6f206c6f7760501b6044820152606490fd5b15610b7f57565b60405162461bcd60e51b815260206004820152601660248201527545524332303a206e6f207a65726f206164647265737360501b6044820152606490fd5b91908203918211610bca57565b634e487b7160e01b600052601160045260246000fd5b91908201809211610bca57565b8115801590610c95575b610c27575b6040519182526001600160a01b0316903390600080516020610dec83398151915290602090a3600190565b816000338152806020526040812054610c4283821015610b33565b6001600160a01b0384169033829003610c5f575b50505050610bfc565b604093610c71916107d6841515610b78565b3383528260205283832055815220610c8a838254610be0565b905581388080610c56565b50336001600160a01b03821614610bf7565b6000467f000000000000000000000000000000000000000000000000000000000000000003610cf557507f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101917f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218835246604083015230606083015260608252608082019082821067ffffffffffffffff831117610d52575060405251902090565b634e487b7160e01b81526041600452602490fd5b600354610d738282610be0565b908110610db6576003553360005260006020526040600020610d96828254610be0565b90556040519081526000600080516020610dec83398151915260203393a3565b60405162461bcd60e51b815260206004820152600d60248201526c4d696e74206f766572666c6f7760981b6044820152606490fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220d45368f8fb83f339eb2331b3218db3ba7d096788a18686bad143d13c8ebe0b2d64736f6c63430008120033";

type CTokenMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CTokenMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CTokenMock__factory extends ContractFactory {
  constructor(...args: CTokenMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _underlying: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CTokenMock> {
    return super.deploy(_underlying, overrides || {}) as Promise<CTokenMock>;
  }
  override getDeployTransaction(
    _underlying: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_underlying, overrides || {});
  }
  override attach(address: string): CTokenMock {
    return super.attach(address) as CTokenMock;
  }
  override connect(signer: Signer): CTokenMock__factory {
    return super.connect(signer) as CTokenMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CTokenMockInterface {
    return new utils.Interface(_abi) as CTokenMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CTokenMock {
    return new Contract(address, _abi, signerOrProvider) as CTokenMock;
  }
}
