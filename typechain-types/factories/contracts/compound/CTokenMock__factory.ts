/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  CTokenMock,
  CTokenMockInterface,
} from "../../../contracts/compound/CTokenMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_underlying",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "exchangeRateStored",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_val",
        type: "uint256",
      },
    ],
    name: "freeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "mint",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "redeemTokens",
        type: "uint256",
      },
    ],
    name: "redeem",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "underlying",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x610100604052600a60c0908152692a32b9ba102a37b5b2b760b11b60e0526004906200002c9082620001da565b50604080518082019091526002815261151560f21b6020820152600590620000559082620001da565b506006805460ff191660121790553480156200007057600080fd5b50604051620012ed380380620012ed8339810160408190526200009391620002a6565b4660a081905269152d02c7e14af6800000906200010390604080517f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692186020820152908101829052306060820152600090608001604051602081830303815290604052805190602001209050919050565b608052600355600680546001600160a01b0390921661010002610100600160a81b0319909216919091179055620002d8565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200016057607f821691505b6020821081036200018157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001d557600081815260208120601f850160051c81016020861015620001b05750805b601f850160051c820191505b81811015620001d157828155600101620001bc565b5050505b505050565b81516001600160401b03811115620001f657620001f662000135565b6200020e816200020784546200014b565b8462000187565b602080601f8311600181146200024657600084156200022d5750858301515b600019600386901b1c1916600185901b178555620001d1565b600085815260208120601f198616915b82811015620002775788860151825594840194600190910190840162000256565b5085821015620002965787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215620002b957600080fd5b81516001600160a01b0381168114620002d157600080fd5b9392505050565b60805160a051610fef620002fe6000396000610aa201526000610ad30152610fef6000f3fe6080604052600436106101025760003560e01c80636f307dc31161009557806395d89b411161006457806395d89b41146102ca578063a9059cbb146102df578063d505accf146102ff578063db006a751461031f578063dd62ed3e1461033f57600080fd5b80636f307dc31461021357806370a08231146102505780637c928fe91461027d5780637ecebe001461029d57600080fd5b8063182df0f5116100d1578063182df0f51461019757806323b872dd146101b2578063313ce567146101d25780633644e515146101fe57600080fd5b806306fdde031461010e578063095ea7b3146101395780631249c58b1461016957806318160ddd1461017357600080fd5b3661010957005b600080fd5b34801561011a57600080fd5b50610123610377565b6040516101309190610d44565b60405180910390f35b34801561014557600080fd5b50610159610154366004610d93565b610405565b6040519015158152602001610130565b610171610471565b005b34801561017f57600080fd5b5061018960035481565b604051908152602001610130565b3480156101a357600080fd5b50670de0b6b3a7640000610189565b3480156101be57600080fd5b506101596101cd366004610dbd565b610491565b3480156101de57600080fd5b506006546101ec9060ff1681565b60405160ff9091168152602001610130565b34801561020a57600080fd5b506101896106a2565b34801561021f57600080fd5b506006546102389061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610130565b34801561025c57600080fd5b5061018961026b366004610df9565b60006020819052908152604090205481565b34801561028957600080fd5b50610171610298366004610e1b565b6106b1565b3480156102a957600080fd5b506101896102b8366004610df9565b60026020526000908152604090205481565b3480156102d657600080fd5b506101236106bb565b3480156102eb57600080fd5b506101596102fa366004610d93565b6106c8565b34801561030b57600080fd5b5061017161031a366004610e34565b61080d565b34801561032b57600080fd5b5061018961033a366004610e1b565b610a60565b34801561034b57600080fd5b5061018961035a366004610ea7565b600160209081526000928352604080842090915290825290205481565b6004805461038490610eda565b80601f01602080910402602001604051908101604052809291908181526020018280546103b090610eda565b80156103fd5780601f106103d2576101008083540402835291602001916103fd565b820191906000526020600020905b8154815290600101906020018083116103e057829003601f168201915b505050505081565b3360008181526001602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104609086815260200190565b60405180910390a350600192915050565b61047f610298606434610f2a565b61048e336102fa606434610f2a565b50565b6000811561065d576001600160a01b038416600090815260208190526040902054828110156105005760405162461bcd60e51b815260206004820152601660248201527545524332303a2062616c616e636520746f6f206c6f7760501b60448201526064015b60405180910390fd5b836001600160a01b0316856001600160a01b03161461065b576001600160a01b038516600090815260016020908152604080832033845290915290205460001981146105c557838110156105965760405162461bcd60e51b815260206004820152601860248201527f45524332303a20616c6c6f77616e636520746f6f206c6f77000000000000000060448201526064016104f7565b6105a08482610f2a565b6001600160a01b03871660009081526001602090815260408083203384529091529020555b6001600160a01b0385166106145760405162461bcd60e51b815260206004820152601660248201527545524332303a206e6f207a65726f206164647265737360501b60448201526064016104f7565b61061e8483610f2a565b6001600160a01b038088166000908152602081905260408082209390935590871681529081208054869290610654908490610f41565b9091555050505b505b826001600160a01b0316846001600160a01b0316600080516020610f9a8339815191528460405161069091815260200190565b60405180910390a35060019392505050565b60006106ac610a9e565b905090565b61048e3382610af5565b6005805461038490610eda565b6000811515806106e05750336001600160a01b038416145b156107e257336000908152602081905260409020548281101561073e5760405162461bcd60e51b815260206004820152601660248201527545524332303a2062616c616e636520746f6f206c6f7760501b60448201526064016104f7565b336001600160a01b038516146107e0576001600160a01b03841661079d5760405162461bcd60e51b815260206004820152601660248201527545524332303a206e6f207a65726f206164647265737360501b60448201526064016104f7565b6107a78382610f2a565b33600090815260208190526040808220929092556001600160a01b038616815290812080548592906107da908490610f41565b90915550505b505b6040518281526001600160a01b038416903390600080516020610f9a83398151915290602001610460565b6001600160a01b0387166108635760405162461bcd60e51b815260206004820152601860248201527f45524332303a204f776e65722063616e6e6f742062652030000000000000000060448201526064016104f7565b8342106108a35760405162461bcd60e51b815260206004820152600e60248201526d115490cc8c0e88115e1c1a5c995960921b60448201526064016104f7565b6001600160a01b0387166000818152600260205260408120805460019261094d927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928d928d928d92916108f683610f59565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810188905260e00160405160208183030381529060405280519060200120610baf565b6040805160008152602081018083529290925260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa15801561099b573d6000803e3d6000fd5b505050602060405103516001600160a01b0316146109fb5760405162461bcd60e51b815260206004820152601860248201527f45524332303a20496e76616c6964205369676e6174757265000000000000000060448201526064016104f7565b6001600160a01b038781166000818152600160209081526040808320948b168084529482529182902089905590518881527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b604051600090339083156108fc0290849084818181858888f19350505050158015610a8f573d6000803e3d6000fd5b50610a9a3383610c04565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000004614610ad0576106ac46610cd3565b507f000000000000000000000000000000000000000000000000000000000000000090565b600081600354610b059190610f41565b9050600354811015610b495760405162461bcd60e51b815260206004820152600d60248201526c4d696e74206f766572666c6f7760981b60448201526064016104f7565b60038190556001600160a01b03831660009081526020819052604081208054849290610b76908490610f41565b90915550506040518281526001600160a01b03841690600090600080516020610f9a8339815191529060200160405180910390a3505050565b600060405180604001604052806002815260200161190160f01b815250610bd4610a9e565b83604051602001610be793929190610f72565b604051602081830303815290604052805190602001209050919050565b6001600160a01b038216600090815260208190526040902054811115610c5c5760405162461bcd60e51b815260206004820152600d60248201526c084eae4dc40e8dede40daeac6d609b1b60448201526064016104f7565b8060036000828254610c6e9190610f2a565b90915550506001600160a01b03821660009081526020819052604081208054839290610c9b908490610f2a565b90915550506040518181526000906001600160a01b03841690600080516020610f9a8339815191529060200160405180910390a35050565b604080517f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692186020820152908101829052306060820152600090608001610be7565b60005b83811015610d2f578181015183820152602001610d17565b83811115610d3e576000848401525b50505050565b6020815260008251806020840152610d63816040850160208701610d14565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610d8e57600080fd5b919050565b60008060408385031215610da657600080fd5b610daf83610d77565b946020939093013593505050565b600080600060608486031215610dd257600080fd5b610ddb84610d77565b9250610de960208501610d77565b9150604084013590509250925092565b600060208284031215610e0b57600080fd5b610e1482610d77565b9392505050565b600060208284031215610e2d57600080fd5b5035919050565b600080600080600080600060e0888a031215610e4f57600080fd5b610e5888610d77565b9650610e6660208901610d77565b95506040880135945060608801359350608088013560ff81168114610e8a57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610eba57600080fd5b610ec383610d77565b9150610ed160208401610d77565b90509250929050565b600181811c90821680610eee57607f821691505b602082108103610f0e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082821015610f3c57610f3c610f14565b500390565b60008219821115610f5457610f54610f14565b500190565b600060018201610f6b57610f6b610f14565b5060010190565b60008451610f84818460208901610d14565b9190910192835250602082015260400191905056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122092271ecfa2b929ca5aa7dce816ea78968169c9a805173df1983bd2ba90a7178f64736f6c634300080f0033";

type CTokenMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CTokenMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CTokenMock__factory extends ContractFactory {
  constructor(...args: CTokenMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _underlying: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CTokenMock> {
    return super.deploy(_underlying, overrides || {}) as Promise<CTokenMock>;
  }
  override getDeployTransaction(
    _underlying: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_underlying, overrides || {});
  }
  override attach(address: string): CTokenMock {
    return super.attach(address) as CTokenMock;
  }
  override connect(signer: Signer): CTokenMock__factory {
    return super.connect(signer) as CTokenMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CTokenMockInterface {
    return new utils.Interface(_abi) as CTokenMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CTokenMock {
    return new Contract(address, _abi, signerOrProvider) as CTokenMock;
  }
}
